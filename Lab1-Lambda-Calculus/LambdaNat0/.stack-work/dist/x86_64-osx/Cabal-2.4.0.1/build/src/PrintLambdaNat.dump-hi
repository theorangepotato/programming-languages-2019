
==================== FINAL INTERFACE ====================
2019-09-15 01:48:32.362505 UTC

interface LambdaNat-0.1.0.0-4B7roTwwXlI2zWJKCli09t:PrintLambdaNat 8064
  interface hash: f65a78865bb9f85e91f6ac6ee938020a
  ABI hash: 5056c7a9da6194b48ccf0ba66464e35c
  export-list hash: de08f75bd3337ee8e539d8c5d6b7a40e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2a2cb3c13acd11cbb718ac42ac310733
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  PrintLambdaNat.concatD
  PrintLambdaNat.concatS
  PrintLambdaNat.doc
  PrintLambdaNat.mkEsc
  PrintLambdaNat.parenth
  PrintLambdaNat.prPrec
  PrintLambdaNat.printTree
  PrintLambdaNat.render
  PrintLambdaNat.replicateS
  PrintLambdaNat.Doc
  PrintLambdaNat.Print{PrintLambdaNat.prt PrintLambdaNat.prtList}
module dependencies: AbsLambdaNat
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  AbsLambdaNat a067c56c1c60bca31b2c84536017b611
  exports: 588871308b1ae83e2d0cad22dc7fdb22
  EAbs 270084643309b7f45002d53bb4a2e899
  EApp aa6b94edf85e1b52cd6a692b6059ebb0
  EVar b88faa4ef7c300a0218389ec2ec02587
  Exp 316054b264133484a7fa0dbfcfc0c1b1
  Id c571278a137387641fdd41d2c34f8d35
  Id a72581c8b7802531470ab71ae8d78cd7
  Prog b8480ec5051fe45f6ff3f90490d565f2
  Program ba9436691401333ce9bc71e1971d5e28
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:GHC.Unicode 87726eb81a3f9c9b22160a0afd5dc56a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
addDependentFile "/Users/alexanderkurz/.stack/programs/x86_64-osx/ghc-8.6.4/lib/ghc-8.6.4/include/ghcversion.h" a0ce8aeb7f525f4d70decd6c1d3ca2dd
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.4.0.1/build/autogen/cabal_macros.h" ae3a7c442b1d2cc19b91d5dc56c66c54
a9b8d8d7fbdea48b869df71ea6b6ed02
  $dmprtList ::
    PrintLambdaNat.Print a =>
    GHC.Types.Int -> [a] -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C(C(U))),A)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a ($dPrint :: PrintLambdaNat.Print a) (i :: GHC.Types.Int) ->
                 let {
                   g :: a -> PrintLambdaNat.Doc = PrintLambdaNat.prt @ a $dPrint i
                 } in
                 \ (x :: [a]) ->
                 GHC.Base.foldr
                   @ a
                   @ ([GHC.Show.ShowS] -> [GHC.Show.ShowS])
                   (GHC.Base.mapFB
                      @ ([GHC.Show.ShowS] -> [GHC.Show.ShowS])
                      @ ([GHC.Show.ShowS] -> [GHC.Show.ShowS])
                      @ a
                      (GHC.Base..
                         @ [GHC.Show.ShowS]
                         @ [GHC.Show.ShowS]
                         @ [GHC.Show.ShowS])
                      g)
                   (GHC.Base.id @ [GHC.Show.ShowS])
                   x) -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrintChar :: PrintLambdaNat.Print GHC.Types.Char
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  PrintLambdaNat.$fPrintChar_$cprt
                  PrintLambdaNat.$fPrintChar_$cprtList -}
4281ab98eb9339792b98feb212ab7981
  $fPrintChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '"'#) -}
3dd39fd8c640c505d30364ec51dc8cf0
  $fPrintChar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   PrintLambdaNat.$fPrintChar3) -}
ea5fbc7332ee2658d22c23c44f911cb5
  $fPrintChar3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\\\"#) -}
13c9a2c2d7645412c6fc6ac73b6f5672
  $fPrintChar4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\\'#) -}
eceb9c09b37381b283b68636ce3698e3
  $fPrintChar5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   PrintLambdaNat.$fPrintChar6) -}
133727fa73b2e599e6b2a340045f6d3b
  $fPrintChar6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\n"#) -}
32e79181109794a102ae521f55c2df46
  $fPrintChar7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   PrintLambdaNat.$fPrintChar8) -}
13c569540a6028a65b93d68518293aaf
  $fPrintChar8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\t"#) -}
edae516fd84fc57ce727ae4e0a6b2be7
  $fPrintChar9 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\''#) -}
c7f5024f803eb5babba2e5fe136b131c
  $fPrintChar_$cprt ::
    GHC.Types.Int -> GHC.Types.Char -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><L,U(U)><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Char)
                   (w2 :: [GHC.Show.ShowS]) ->
                 case PrintLambdaNat.$w$cprt w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Show.ShowS ww1 ww2 }) -}
515eea521ee2cb3383a9eba31a702aea
  $fPrintChar_$cprtList ::
    GHC.Types.Int -> [GHC.Types.Char] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [GHC.Types.Char])
                   (w2 :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (\ (x :: GHC.Base.String) ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      PrintLambdaNat.$fPrintChar1
                      (PrintLambdaNat.$fPrintChar_go
                         w1
                         (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar1 x)))
                   w2) -}
b6c206178258d787caeb5760761a2b75
  $fPrintChar_go ::
    [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrintDouble :: PrintLambdaNat.Print GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  PrintLambdaNat.$fPrintDouble_$cprt
                  PrintLambdaNat.$fPrintDouble_$cprtList -}
f3b58a11fe25944d9782643154ca8530
  $fPrintDouble_$cprt ::
    GHC.Types.Int -> GHC.Types.Double -> PrintLambdaNat.Doc
  {- Arity: 2, Strictness: <L,A><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Int) (x :: GHC.Types.Double) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (case x of ww { GHC.Types.D# ww1 ->
                    GHC.Float.$w$sshowSignedFloat
                      GHC.Float.$fShowDouble2
                      GHC.Show.$fShow(,)1
                      ww1 })) -}
33aa14bc3a11cb38b798cb3e0d5b1674
  $fPrintDouble_$cprtList ::
    GHC.Types.Int -> [GHC.Types.Double] -> PrintLambdaNat.Doc
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Double]) ->
                 PrintLambdaNat.$fPrintDouble_go w1) -}
21c0b6dfe644dbbd7c687cce6c3bd4e7
  $fPrintDouble_go ::
    [GHC.Types.Double] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 1, Strictness: <S,1*U> -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrintExp :: PrintLambdaNat.Print AbsLambdaNat.Exp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Exp
                  PrintLambdaNat.$fPrintExp_$cprt
                  PrintLambdaNat.$fPrintExp_$cprtList -}
46e72ae10d311b4ef139308c776ba7f5
  $fPrintExp_$cprt ::
    GHC.Types.Int -> AbsLambdaNat.Exp -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: AbsLambdaNat.Exp)
                   (w2 :: [GHC.Show.ShowS]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case PrintLambdaNat.$w$cprt1 ww1 w1 w2 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Show.ShowS ww3 ww4 } }) -}
ed2445641703a20c722b48bac5223685
  $fPrintExp_$cprtList ::
    GHC.Types.Int -> [AbsLambdaNat.Exp] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,1*U>,
     Unfolding: (\ (i :: GHC.Types.Int)
                   (eta :: [AbsLambdaNat.Exp])
                   (eta1 :: [GHC.Show.ShowS]) ->
                 letrec {
                   go :: [AbsLambdaNat.Exp] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [AbsLambdaNat.Exp]) (eta2 :: [GHC.Show.ShowS]) ->
                     case ds of wild {
                       [] -> eta2
                       : y ys
                       -> case i of ww { GHC.Types.I# ww1 ->
                          case PrintLambdaNat.$w$cprt1
                                 ww1
                                 y
                                 (go ys eta2) of ww2 { (#,#) ww3 ww4 ->
                          GHC.Types.: @ GHC.Show.ShowS ww3 ww4 } } }
                 } in
                 go eta eta1) -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrintId :: PrintLambdaNat.Print AbsLambdaNat.Id
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Id
                  PrintLambdaNat.$fPrintId_$cprt
                  PrintLambdaNat.$fPrintId_$cprtList -}
ca7de256ae525bc637fff9702267b52e
  $fPrintId_$cprt ::
    GHC.Types.Int -> AbsLambdaNat.Id -> PrintLambdaNat.Doc
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: AbsLambdaNat.Id)
                   (eta :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (GHC.Base.++ @ GHC.Types.Char ds1 `cast` (AbsLambdaNat.N:Id[0]))
                   eta) -}
23dc31724bc6e5e59b4462d983a69df9
  $fPrintId_$cprtList ::
    GHC.Types.Int -> [AbsLambdaNat.Id] -> PrintLambdaNat.Doc
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [AbsLambdaNat.Id])
                   (w2 :: [GHC.Show.ShowS]) ->
                 PrintLambdaNat.$fPrintId_go w1 w2) -}
aa283e4239dd94a5c080f1a501ad0777
  $fPrintId_go ::
    [AbsLambdaNat.Id] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrintInteger :: PrintLambdaNat.Print GHC.Integer.Type.Integer
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  PrintLambdaNat.$fPrintInteger_$cprt
                  PrintLambdaNat.$fPrintInteger_$cprtList -}
707b87a3b388ad99aa3b96b5f6ca8901
  $fPrintInteger_$cprt ::
    GHC.Types.Int -> GHC.Integer.Type.Integer -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: GHC.Integer.Type.Integer)
                   (eta :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (\ (w2 :: GHC.Base.String) ->
                    case GHC.Show.$w$cshowsPrec4 0# x w2 of ww2 { (#,#) ww3 ww4 ->
                    GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                   eta) -}
c1b5bed8b7fff87464e9903d051b09c5
  $fPrintInteger_$cprtList ::
    GHC.Types.Int -> [GHC.Integer.Type.Integer] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [GHC.Integer.Type.Integer])
                   (w2 :: [GHC.Show.ShowS]) ->
                 PrintLambdaNat.$fPrintInteger_go w1 w2) -}
c149379b8020d4282e277fe44a4e2582
  $fPrintInteger_go ::
    [GHC.Integer.Type.Integer] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrintProgram :: PrintLambdaNat.Print AbsLambdaNat.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Program
                  PrintLambdaNat.$fPrintProgram_$cprt
                  PrintLambdaNat.$fPrintProgram_$cprtList -}
fc1a04f41baea18b9f1bc9189b57515c
  $fPrintProgram1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   PrintLambdaNat.$fPrintProgram2) -}
aef37737b4ce7b44a67731d908e10401
  $fPrintProgram2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ')'#) -}
54ca361f747c6783a8f40e6c8d8599f3
  $fPrintProgram3 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   PrintLambdaNat.$fPrintProgram4) -}
be7a28ae99045afe352f7d836bed44c8
  $fPrintProgram4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '('#) -}
f9f58295717bfc4d6d2b217df5785650
  $fPrintProgram_$cprt ::
    GHC.Types.Int -> AbsLambdaNat.Program -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>m2,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: AbsLambdaNat.Program)
                   (w2 :: [GHC.Show.ShowS]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { AbsLambdaNat.Prog ww3 ->
                 case GHC.Prim.<# 0# ww1 of lwild {
                   DEFAULT
                   -> case PrintLambdaNat.$w$cprt1 0# ww3 w2 of ww4 { (#,#) ww5 ww6 ->
                      GHC.Types.: @ GHC.Show.ShowS ww5 ww6 }
                   1#
                   -> GHC.Types.:
                        @ GHC.Show.ShowS
                        PrintLambdaNat.$fPrintProgram3
                        (case PrintLambdaNat.$w$cprt1
                                0#
                                ww3
                                (GHC.Types.:
                                   @ GHC.Show.ShowS
                                   PrintLambdaNat.$fPrintProgram1
                                   w2) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Show.ShowS ww5 ww6 }) } } }) -}
d00a5e7482c174661d472d2cb822a46d
  $fPrintProgram_$cprtList ::
    GHC.Types.Int -> [AbsLambdaNat.Program] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,1*U>,
     Unfolding: (\ (i :: GHC.Types.Int)
                   (eta :: [AbsLambdaNat.Program])
                   (eta1 :: [GHC.Show.ShowS]) ->
                 letrec {
                   go :: [AbsLambdaNat.Program]
                         -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [AbsLambdaNat.Program]) (eta2 :: [GHC.Show.ShowS]) ->
                     case ds of wild {
                       [] -> eta2
                       : y ys
                       -> case i of ww { GHC.Types.I# ww1 ->
                          case y of ww2 { AbsLambdaNat.Prog ww3 ->
                          case GHC.Prim.<# 0# ww1 of lwild {
                            DEFAULT
                            -> case PrintLambdaNat.$w$cprt1
                                      0#
                                      ww3
                                      (go ys eta2) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Show.ShowS ww5 ww6 }
                            1#
                            -> GHC.Types.:
                                 @ GHC.Show.ShowS
                                 PrintLambdaNat.$fPrintProgram3
                                 (case PrintLambdaNat.$w$cprt1
                                         0#
                                         ww3
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            PrintLambdaNat.$fPrintProgram1
                                            (go ys eta2)) of ww4 { (#,#) ww5 ww6 ->
                                  GHC.Types.: @ GHC.Show.ShowS ww5 ww6 }) } } } }
                 } in
                 go eta eta1) -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrint[] :: PrintLambdaNat.Print a => PrintLambdaNat.Print [a]
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,U)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: PrintLambdaNat.Print a).
                  @ [a]
                  (PrintLambdaNat.prtList @ a v)
                  (PrintLambdaNat.$fPrint[]_$cprtList @ a v) -}
a9b8d8d7fbdea48b869df71ea6b6ed02
  $fPrint[]_$cprtList ::
    PrintLambdaNat.Print a =>
    GHC.Types.Int -> [[a]] -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C(C(U))))><L,U>,
     Unfolding: (\ @ a
                   ($dPrint :: PrintLambdaNat.Print a)
                   (i :: GHC.Types.Int) ->
                 let {
                   g :: [a] -> PrintLambdaNat.Doc
                   = PrintLambdaNat.prtList @ a $dPrint i
                 } in
                 letrec {
                   go :: [[a]] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [[a]]) ->
                     case ds of wild {
                       [] -> GHC.Base.id @ [GHC.Show.ShowS]
                       : y ys
                       -> let {
                            ys1 :: [GHC.Show.ShowS] -> [GHC.Show.ShowS] = go ys
                          } in
                          let {
                            f11 :: [GHC.Show.ShowS] -> [GHC.Show.ShowS] = g y
                          } in
                          \ (x :: [GHC.Show.ShowS]) -> f11 (ys1 x) }
                 } in
                 \ (x :: [[a]]) -> go x) -}
cec8d2e9f3f6050b4faf4ddc0d335b42
  $tc'C:Print :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6983848085871117828##
                   1226721477796428527##
                   PrintLambdaNat.$trModule
                   PrintLambdaNat.$tc'C:Print2
                   1#
                   PrintLambdaNat.$tc'C:Print1) -}
cce9fd46099a7f7923cae840d2c999cd
  $tc'C:Print1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0f8d3dea56e0a4b76bc2c6a62e7cff5a
  $tc'C:Print2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$tc'C:Print3) -}
17b343af29f93dd0a6b4d0eab7e711b1
  $tc'C:Print3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Print"#) -}
060fd9dc1113aad55094f37d49c299df
  $tcPrint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7092162633230406012##
                   7814105192391565647##
                   PrintLambdaNat.$trModule
                   PrintLambdaNat.$tcPrint2
                   0#
                   PrintLambdaNat.$tcPrint1) -}
909f7af93c6dc3ea80b29de41358b9cf
  $tcPrint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
452cbe985f364ed49bf8673814bbb9e5
  $tcPrint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$tcPrint3) -}
ccfaf397bd4d8129b84b760f1a5325b3
  $tcPrint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Print"#) -}
d80c1aceaec35e89f07c9833ead9fb89
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PrintLambdaNat.$trModule3
                   PrintLambdaNat.$trModule1) -}
c70310e574ba85483bab966c62aa23eb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$trModule2) -}
6329706aa69fe4d045e28fbcbb6e5024
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PrintLambdaNat"#) -}
8326d888c690814095f26efc0fbac858
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$trModule4) -}
a6529abd82f21dd7887ee8dfdcaeeee3
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LambdaNat-0.1.0.0-4B7roTwwXlI2zWJKCli09t"#) -}
f1b944c5f331311f355e189bf7531348
  $w$cprt ::
    GHC.Types.Char
    -> [GHC.Show.ShowS] -> (# GHC.Show.ShowS, [GHC.Show.ShowS] #)
  {- Arity: 2, Strictness: <L,U(U)><L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Char) (w1 :: [GHC.Show.ShowS]) ->
                 (# \ (x :: GHC.Base.String) ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      PrintLambdaNat.$fPrintChar9
                      (case w of wild { GHC.Types.C# x1 ->
                       case x1 of wild1 {
                         DEFAULT
                         -> GHC.Types.:
                              @ GHC.Types.Char
                              wild
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x)
                         '\t'#
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar7
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x)
                         '\n'#
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar5
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x)
                         '\''#
                         -> GHC.Types.:
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar4
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 wild
                                 (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x))
                         '\\'#
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar2
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x) } }),
                    w1 #)) -}
a7d6516a5646528d8bdf8491682a7938
  $w$cprt1 ::
    GHC.Prim.Int#
    -> AbsLambdaNat.Exp
    -> [GHC.Show.ShowS]
    -> (# GHC.Show.ShowS, [GHC.Show.ShowS] #)
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
2b79dea11ee0189037f29fb6800077e3
  $wmkEsc ::
    GHC.Prim.Char#
    -> GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Char#)
                   (ww1 :: GHC.Prim.Char#)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.eqChar# ww1 ww of lwild {
                   DEFAULT
                   -> case ww1 of ds {
                        DEFAULT -> GHC.Types.: @ GHC.Types.Char (GHC.Types.C# ds) w
                        '\t'# -> GHC.Base.++ @ GHC.Types.Char PrintLambdaNat.$fPrintChar7 w
                        '\n'# -> GHC.Base.++ @ GHC.Types.Char PrintLambdaNat.$fPrintChar5 w
                        '\\'#
                        -> GHC.Base.++ @ GHC.Types.Char PrintLambdaNat.$fPrintChar2 w }
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        PrintLambdaNat.$fPrintChar4
                        (GHC.Types.: @ GHC.Types.Char (GHC.Types.C# ww1) w) }) -}
855b934f2f3d26d216d574831b370515
  $wreplicateS ::
    GHC.Prim.Int#
    -> GHC.Show.ShowS -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Show.ShowS)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> w1
                   1#
                   -> letrec {
                        $wxs1 :: GHC.Prim.Int# -> [GHC.Types.Char] -> [GHC.Types.Char]
                          {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [2] -}
                        = \ (ww1 :: GHC.Prim.Int#) (w2 :: [GHC.Types.Char]) ->
                          case ww1 of ds1 {
                            DEFAULT -> w ($wxs1 (GHC.Prim.-# ds1 1#) w2) 1# -> w w2 }
                      } in
                      $wxs1 ww w1 }) -}
a86d3bba8709adb7bac0810bb900e161
  type Doc = [GHC.Show.ShowS] -> [GHC.Show.ShowS]
a9b8d8d7fbdea48b869df71ea6b6ed02
  class Print a where
    prt :: GHC.Types.Int -> a -> PrintLambdaNat.Doc
    prtList :: GHC.Types.Int -> [a] -> PrintLambdaNat.Doc
    {-# MINIMAL prt #-}
9166c885bc56c42f5ba921b43cfea4df
  concatD :: [PrintLambdaNat.Doc] -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
eba00ebf61bdb17c605fea3f0f55b09f
  concatS :: [GHC.Show.ShowS] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
4d525bfc83efedba9dbcbf41fd0fa932
  doc :: GHC.Show.ShowS -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.: @ GHC.Show.ShowS) -}
4bec549d255f7c96033cb26ebcaa9da2
  mkEsc :: GHC.Types.Char -> GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Types.Char)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 case w1 of ww2 { GHC.Types.C# ww3 ->
                 PrintLambdaNat.$wmkEsc ww1 ww3 w2 } }) -}
d5b34fb3fa9e1fbbb55fcc45728f2e88
  parenth :: PrintLambdaNat.Doc -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ss :: PrintLambdaNat.Doc) (eta :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   PrintLambdaNat.$fPrintProgram3
                   (ss
                      (GHC.Types.:
                         @ GHC.Show.ShowS
                         PrintLambdaNat.$fPrintProgram1
                         eta))) -}
62ad2cf29eae86d387396375fda6af67
  prPrec ::
    GHC.Types.Int
    -> GHC.Types.Int -> PrintLambdaNat.Doc -> PrintLambdaNat.Doc
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (i :: GHC.Types.Int)
                   (j :: GHC.Types.Int)
                   (eta :: PrintLambdaNat.Doc) ->
                 case j of wild { GHC.Types.I# x ->
                 case i of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.<# x y of lwild {
                   DEFAULT -> eta 1# -> PrintLambdaNat.parenth eta } } }) -}
d906cd506a1bf70e9584ae1af0234f63
  printTree :: PrintLambdaNat.Print a => a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*C1(C(C1(U))),A)>,
     Unfolding: (\ @ a ($dPrint :: PrintLambdaNat.Print a) ->
                 let {
                   g :: a -> PrintLambdaNat.Doc
                   = PrintLambdaNat.prt @ a $dPrint PrintLambdaNat.printTree2
                 } in
                 \ (x :: a) ->
                 PrintLambdaNat.printTree_rend
                   PrintLambdaNat.printTree2
                   (GHC.Base.map
                      @ ([GHC.Types.Char] -> GHC.Base.String)
                      @ [GHC.Types.Char]
                      PrintLambdaNat.printTree1
                      (g x (GHC.Types.[] @ GHC.Show.ShowS)))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1243b45fb146acde5816e5125e9954d4
  printTree1 ::
    ([GHC.Types.Char] -> GHC.Base.String) -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [GHC.Types.Char] -> GHC.Base.String) ->
                 ds (GHC.Types.[] @ GHC.Types.Char)) -}
d52d4302ad95ab635d2f2e3201469b7c
  printTree2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
a90142f61cb06ce3bea5959e10c4de7b
  printTree_rend ::
    GHC.Types.Int
    -> [[GHC.Types.Char]] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,1*U> -}
17e3c2e57731625e047d9b7f2748ecbe
  render :: PrintLambdaNat.Doc -> GHC.Base.String
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: (\ (d :: PrintLambdaNat.Doc) ->
                 PrintLambdaNat.printTree_rend
                   PrintLambdaNat.printTree2
                   (GHC.Base.map
                      @ ([GHC.Types.Char] -> GHC.Base.String)
                      @ [GHC.Types.Char]
                      PrintLambdaNat.printTree1
                      (d (GHC.Types.[] @ GHC.Show.ShowS)))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9b299f302a494bac30b327e8a8bf81e5
  replicateS :: GHC.Types.Int -> GHC.Show.ShowS -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Show.ShowS)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PrintLambdaNat.$wreplicateS ww1 w1 w2 }) -}
instance [safe] PrintLambdaNat.Print [GHC.Types.Char]
  = PrintLambdaNat.$fPrintChar
instance [safe] PrintLambdaNat.Print [GHC.Types.Double]
  = PrintLambdaNat.$fPrintDouble
instance [safe] PrintLambdaNat.Print [AbsLambdaNat.Exp]
  = PrintLambdaNat.$fPrintExp
instance [safe] PrintLambdaNat.Print [AbsLambdaNat.Id]
  = PrintLambdaNat.$fPrintId
instance [safe] PrintLambdaNat.Print [GHC.Integer.Type.Integer]
  = PrintLambdaNat.$fPrintInteger
instance [safe] PrintLambdaNat.Print [AbsLambdaNat.Program]
  = PrintLambdaNat.$fPrintProgram
instance [overlappable] [safe] PrintLambdaNat.Print [[]]
  = PrintLambdaNat.$fPrint[]
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

