
==================== FINAL INTERFACE ====================
2019-09-15 01:48:30.610112 UTC

interface LambdaNat-0.1.0.0-4B7roTwwXlI2zWJKCli09t:ErrM 8064
  interface hash: 9c0ebf2719258a566ad16a780ed71dc8
  ABI hash: 891511a0d247a63f97006997da116fd7
  export-list hash: 6a1a683d2b1212de37fcd511d370fe9e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  ErrM.Err{ErrM.Bad ErrM.Ok}
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Applicative 2ae514eb141d45774730765c61bb41c0
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Read 0604f4258fedea7e033ea68c6d7b40f2
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:Text.ParserCombinators.ReadPrec 9773f55573a0fca144b6966b06590c4e
import  -/  base-4.12.0.0:Text.Read.Lex cc2610206b1ce0c49789637e16412aa1
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fAlternativeErr :: GHC.Base.Alternative ErrM.Err
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ErrM.Err
                  ErrM.$fApplicativeErr
                  ErrM.$fAlternativeErr_$cmzero
                  ErrM.$fAlternativeErr_$cmplus
                  ErrM.$fAlternativeErr_$csome
                  ErrM.$fAlternativeErr_$cmany -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fAlternativeErr1 :: ErrM.Err [a]
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ a -> ErrM.Ok @ [a] (GHC.Types.[] @ a)) -}
818f5950b754eb1de8703bfa0220f96e
  $fAlternativeErr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ErrM.$fAlternativeErr3) -}
97f40c776fe3985ec33b18436a390bca
  $fAlternativeErr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Err.mzero"#) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fAlternativeErr_$cmany :: ErrM.Err a -> ErrM.Err [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (v :: ErrM.Err a) ->
                 letrec {
                   many_v :: ErrM.Err [a]
                   = case v of wild {
                       ErrM.Ok a1
                       -> case many_v of wild1 {
                            ErrM.Ok a2 -> ErrM.Ok @ [a] (GHC.Types.: @ a a1 a2)
                            ErrM.Bad s -> ErrM.$fAlternativeErr1 @ a }
                       ErrM.Bad s -> ErrM.$fAlternativeErr1 @ a }
                 } in
                 many_v) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fAlternativeErr_$cmplus :: ErrM.Err a -> ErrM.Err a -> ErrM.Err a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ds :: ErrM.Err a) (y :: ErrM.Err a) ->
                 case ds of wild { ErrM.Ok ipv -> wild ErrM.Bad ds1 -> y }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fAlternativeErr_$cmzero :: ErrM.Err a
  {- Strictness: m2,
     Unfolding: (\ @ a -> ErrM.Bad @ a ErrM.$fAlternativeErr2) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fAlternativeErr_$csome :: ErrM.Err a -> ErrM.Err [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ @ a (v :: ErrM.Err a) ->
                 letrec {
                   some_v :: ErrM.Err [a]
                   = case v of wild {
                       ErrM.Ok a1
                       -> case some_v of wild1 {
                            ErrM.Ok ipv -> ErrM.Ok @ [a] (GHC.Types.: @ a a1 ipv)
                            ErrM.Bad ds
                            -> ErrM.Ok @ [a] (GHC.Types.: @ a a1 (GHC.Types.[] @ a)) }
                       ErrM.Bad s -> ErrM.Bad @ [a] s }
                 } in
                 some_v) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fApplicativeErr :: GHC.Base.Applicative ErrM.Err
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ErrM.Err
                  ErrM.$fFunctorErr
                  ErrM.Ok
                  ErrM.$fApplicativeErr_$c<*>
                  ErrM.$fApplicativeErr_$cliftA2
                  ErrM.$fApplicativeErr_$c*>
                  ErrM.$fApplicativeErr_$c<* -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fApplicativeErr_$c*> :: ErrM.Err a -> ErrM.Err b -> ErrM.Err b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (a1 :: ErrM.Err a) (a2 :: ErrM.Err b) ->
                 case a1 of wild {
                   ErrM.Ok a4 -> a2 ErrM.Bad s -> ErrM.Bad @ b s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fApplicativeErr_$c<* :: ErrM.Err a -> ErrM.Err b -> ErrM.Err a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (x :: ErrM.Err a) (ds :: ErrM.Err b) ->
                 case x of wild {
                   ErrM.Ok a1
                   -> case ds of wild1 {
                        ErrM.Ok a2 -> ErrM.Ok @ a a1 ErrM.Bad s -> ErrM.Bad @ a s }
                   ErrM.Bad s -> ErrM.Bad @ a s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fApplicativeErr_$c<*> ::
    ErrM.Err (a -> b) -> ErrM.Err a -> ErrM.Err b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: ErrM.Err (a -> b)) (ds1 :: ErrM.Err a) ->
                 case ds of wild {
                   ErrM.Ok f
                   -> case ds1 of wild1 {
                        ErrM.Ok a1 -> ErrM.Ok @ b (f a1) ErrM.Bad s -> ErrM.Bad @ b s }
                   ErrM.Bad s -> ErrM.Bad @ b s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fApplicativeErr_$cliftA2 ::
    (a -> b -> c) -> ErrM.Err a -> ErrM.Err b -> ErrM.Err c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*U>,
     Unfolding: (\ @ a @ b @ c (f1 :: a -> b -> c) (x :: ErrM.Err a) ->
                 let {
                   ds :: ErrM.Err (b -> c)
                   = case x of wild {
                       ErrM.Ok a1 -> ErrM.Ok @ (b -> c) (f1 a1)
                       ErrM.Bad s -> ErrM.Bad @ (b -> c) s }
                 } in
                 \ (ds1 :: ErrM.Err b) ->
                 case ds of wild {
                   ErrM.Ok f
                   -> case ds1 of wild1 {
                        ErrM.Ok a1 -> ErrM.Ok @ c (f a1) ErrM.Bad s -> ErrM.Bad @ c s }
                   ErrM.Bad s -> ErrM.Bad @ c s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fEqErr :: GHC.Classes.Eq a => GHC.Classes.Eq (ErrM.Err a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (ErrM.Err a)
                  (ErrM.$fEqErr_$c== @ a v)
                  (ErrM.$fEqErr_$c/= @ a v) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fEqErr_$c/= ::
    GHC.Classes.Eq a => ErrM.Err a -> ErrM.Err a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: ErrM.Err a)
                   (y :: ErrM.Err a) ->
                 case x of wild {
                   ErrM.Ok a1
                   -> case y of wild1 {
                        ErrM.Ok b1
                        -> case GHC.Classes.== @ a $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        ErrM.Bad ipv -> GHC.Types.True }
                   ErrM.Bad a1
                   -> case y of wild1 {
                        ErrM.Ok ipv -> GHC.Types.True
                        ErrM.Bad b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fEqErr_$c== ::
    GHC.Classes.Eq a => ErrM.Err a -> ErrM.Err a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: ErrM.Err a)
                   (ds1 :: ErrM.Err a) ->
                 case ds of wild {
                   ErrM.Ok a1
                   -> case ds1 of wild1 {
                        ErrM.Ok b1 -> GHC.Classes.== @ a $dEq a1 b1
                        ErrM.Bad ipv -> GHC.Types.False }
                   ErrM.Bad a1
                   -> case ds1 of wild1 {
                        ErrM.Ok ipv -> GHC.Types.False
                        ErrM.Bad b1 -> GHC.Base.eqString a1 b1 } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fFunctorErr :: GHC.Base.Functor ErrM.Err
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ErrM.Err ErrM.$fFunctorErr_$cfmap ErrM.$fFunctorErr_$c<$ -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fFunctorErr_$c<$ :: a -> ErrM.Err b -> ErrM.Err a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (x :: a) (eta :: ErrM.Err b) ->
                 case eta of wild {
                   ErrM.Ok a1 -> ErrM.Ok @ a x ErrM.Bad s -> ErrM.Bad @ a s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fFunctorErr_$cfmap :: (a -> b) -> ErrM.Err a -> ErrM.Err b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (f :: a -> b) (m1 :: ErrM.Err a) ->
                 case m1 of wild {
                   ErrM.Ok a1 -> ErrM.Ok @ b (f a1) ErrM.Bad s -> ErrM.Bad @ b s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fMonadErr :: GHC.Base.Monad ErrM.Err
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ErrM.Err
                  ErrM.$fApplicativeErr
                  ErrM.$fMonadErr_$c>>=
                  ErrM.$fMonadErr_$c>>
                  ErrM.Ok
                  ErrM.Bad -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fMonadErr_$c>> :: ErrM.Err a -> ErrM.Err b -> ErrM.Err b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a @ b (m1 :: ErrM.Err a) (k :: ErrM.Err b) ->
                 case m1 of wild {
                   ErrM.Ok a1 -> k ErrM.Bad s -> ErrM.Bad @ b s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fMonadErr_$c>>= :: ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: ErrM.Err a) (f :: a -> ErrM.Err b) ->
                 case ds of wild {
                   ErrM.Ok a1 -> f a1 ErrM.Bad s -> ErrM.Bad @ b s }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fMonadPlusErr :: GHC.Base.MonadPlus ErrM.Err
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ErrM.Err
                  ErrM.$fAlternativeErr
                  ErrM.$fMonadErr
                  ErrM.$fAlternativeErr_$cmzero
                  ErrM.$fAlternativeErr_$cmplus -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr :: GHC.Classes.Ord a => GHC.Classes.Ord (ErrM.Err a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (ErrM.Err a)
                  (ErrM.$fOrdErr_$cp1Ord @ a v)
                  (ErrM.$fOrdErr_$ccompare @ a v)
                  (ErrM.$fOrdErr_$c< @ a v)
                  (ErrM.$fOrdErr_$c<= @ a v)
                  (\ (a1 :: ErrM.Err a) (b :: ErrM.Err a) ->
                   ErrM.$fOrdErr_$c< @ a v b a1)
                  (ErrM.$fOrdErr_$c>= @ a v)
                  (ErrM.$fOrdErr_$cmax @ a v)
                  (ErrM.$fOrdErr_$cmin @ a v) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr_$c< ::
    GHC.Classes.Ord a => ErrM.Err a -> ErrM.Err a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: ErrM.Err a)
                   (b :: ErrM.Err a) ->
                 case a1 of wild {
                   ErrM.Ok a2
                   -> case b of wild1 {
                        ErrM.Ok b1 -> GHC.Classes.< @ a $dOrd a2 b1
                        ErrM.Bad ipv -> GHC.Types.True }
                   ErrM.Bad a2
                   -> case b of wild1 {
                        ErrM.Ok ipv -> GHC.Types.False
                        ErrM.Bad b1 -> GHC.Classes.$fOrd[]_$s$c<1 a2 b1 } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr_$c<= ::
    GHC.Classes.Ord a => ErrM.Err a -> ErrM.Err a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: ErrM.Err a)
                   (b :: ErrM.Err a) ->
                 case b of wild {
                   ErrM.Ok a2
                   -> case a1 of wild1 {
                        ErrM.Ok b1
                        -> case GHC.Classes.< @ a $dOrd a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        ErrM.Bad ipv -> GHC.Types.False }
                   ErrM.Bad a2
                   -> case a1 of wild1 {
                        ErrM.Ok ipv -> GHC.Types.True
                        ErrM.Bad b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr_$c>= ::
    GHC.Classes.Ord a => ErrM.Err a -> ErrM.Err a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: ErrM.Err a)
                   (b :: ErrM.Err a) ->
                 case a1 of wild {
                   ErrM.Ok a2
                   -> case b of wild1 {
                        ErrM.Ok b1
                        -> case GHC.Classes.< @ a $dOrd a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        ErrM.Bad ipv -> GHC.Types.False }
                   ErrM.Bad a2
                   -> case b of wild1 {
                        ErrM.Ok ipv -> GHC.Types.True
                        ErrM.Bad b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr_$ccompare ::
    GHC.Classes.Ord a => ErrM.Err a -> ErrM.Err a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: ErrM.Err a)
                   (b :: ErrM.Err a) ->
                 case a1 of wild {
                   ErrM.Ok a2
                   -> case b of wild1 {
                        ErrM.Ok b1 -> GHC.Classes.compare @ a $dOrd a2 b1
                        ErrM.Bad ipv -> GHC.Types.LT }
                   ErrM.Bad a2
                   -> case b of wild1 {
                        ErrM.Ok ipv -> GHC.Types.GT
                        ErrM.Bad b1 -> GHC.Classes.$fOrd[]_$s$ccompare1 a2 b1 } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr_$cmax ::
    GHC.Classes.Ord a => ErrM.Err a -> ErrM.Err a -> ErrM.Err a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: ErrM.Err a)
                   (y :: ErrM.Err a) ->
                 case y of wild {
                   ErrM.Ok a1
                   -> case x of wild1 {
                        ErrM.Ok b1
                        -> case GHC.Classes.< @ a $dOrd a1 b1 of wild2 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 }
                        ErrM.Bad ipv -> wild1 }
                   ErrM.Bad a1
                   -> case x of wild1 {
                        ErrM.Ok ipv -> wild
                        ErrM.Bad b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             DEFAULT -> wild GHC.Types.LT -> wild1 } } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr_$cmin ::
    GHC.Classes.Ord a => ErrM.Err a -> ErrM.Err a -> ErrM.Err a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: ErrM.Err a)
                   (y :: ErrM.Err a) ->
                 case y of wild {
                   ErrM.Ok a1
                   -> case x of wild1 {
                        ErrM.Ok b1
                        -> case GHC.Classes.< @ a $dOrd a1 b1 of wild2 {
                             GHC.Types.False -> wild1 GHC.Types.True -> wild }
                        ErrM.Bad ipv -> wild }
                   ErrM.Bad a1
                   -> case x of wild1 {
                        ErrM.Ok ipv -> wild1
                        ErrM.Bad b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             DEFAULT -> wild1 GHC.Types.LT -> wild } } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fOrdErr_$cp1Ord ::
    GHC.Classes.Ord a => GHC.Classes.Eq (ErrM.Err a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 ErrM.$fEqErr @ a (GHC.Classes.$p1Ord @ a $dOrd)) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fReadErr :: GHC.Read.Read a => GHC.Read.Read (ErrM.Err a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Read.Read a).
                  @ (ErrM.Err a)
                  (ErrM.$fReadErr_$creadsPrec @ a v)
                  (ErrM.$fReadErr_$creadList @ a v)
                  (ErrM.$fReadErr1 @ a v)
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <ErrM.Err
                                     a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <ErrM.Err a>_R))
                  (ErrM.$fReadErr_$creadListPrec @ a v) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fReadErr1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (ErrM.Err a -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,C(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: ErrM.Err a -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$fRead()6
                   @ (ErrM.Err a)
                   (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                      @ b1
                      (eta2 :: ErrM.Err a -> Text.ParserCombinators.ReadP.P b1) ->
                    case n of wild { GHC.Types.I# x ->
                    let {
                      karg :: Text.ParserCombinators.ReadP.P b1
                      = case GHC.Prim.<=# x 10# of lwild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          1#
                          -> let {
                               lvl117 :: Text.ParserCombinators.ReadP.P b1
                               = let {
                                   lvl118 :: Text.ParserCombinators.ReadP.P b1
                                   = GHC.Read.$fRead()6
                                       @ GHC.Base.String
                                       GHC.Read.$fReadChar2
                                         `cast`
                                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                 <GHC.Base.String>_R))
                                       ErrM.$fReadErr6
                                       @ b1
                                       (\ (a1 :: GHC.Base.String) -> eta2 (ErrM.Bad @ a a1))
                                 } in
                                 Text.Read.Lex.expect2
                                   @ b1
                                   (\ (a3 :: Text.Read.Lex.Lexeme) ->
                                    case a3 of wild1 {
                                      DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                                      Text.Read.Lex.Ident a1
                                      -> case GHC.Base.eqString a1 ErrM.$fReadErr4 of wild2 {
                                           GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                                           GHC.Types.True -> lvl118 } })
                             } in
                             let {
                               k :: () -> Text.ParserCombinators.ReadP.P b1
                                 {- Arity: 1, Strictness: <L,A>,
                                    Unfolding: InlineRule (1, True, True)
                                               (\ (a3 :: ()) -> lvl117) -}
                               = \ (a3 :: ()) -> lvl117
                             } in
                             Text.ParserCombinators.ReadP.Look
                               @ b1
                               (\ (a1 :: GHC.Base.String) ->
                                Text.ParserCombinators.ReadP.skipSpaces2 a1 @ b1 k) }
                    } in
                    case GHC.Prim.<=# x 10# of lwild {
                      DEFAULT
                      -> Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                           @ b1
                           (Text.ParserCombinators.ReadP.Fail @ b1)
                           karg
                      1#
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b1
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b1
                               = ((GHC.Read.readPrec @ a $dRead)
                                    `cast`
                                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                                    ErrM.$fReadErr6)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
                                   @ b1
                                   (\ (a1 :: a) -> eta2 (ErrM.Ok @ a a1))
                             } in
                             Text.Read.Lex.expect2
                               @ b1
                               (\ (a3 :: Text.Read.Lex.Lexeme) ->
                                case a3 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                                  Text.Read.Lex.Ident a1
                                  -> case GHC.Base.eqString a1 ErrM.$fReadErr2 of wild2 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b1
                             {- Arity: 1, Strictness: <L,A>,
                                Unfolding: InlineRule (1, True, True) (\ (a3 :: ()) -> lvl117) -}
                           = \ (a3 :: ()) -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                           @ b1
                           (Text.ParserCombinators.ReadP.Look
                              @ b1
                              (\ (a1 :: GHC.Base.String) ->
                               Text.ParserCombinators.ReadP.skipSpaces2 a1 @ b1 k))
                           karg } })
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <ErrM.Err
                                      a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <ErrM.Err a>_R))
                   eta
                   @ b
                   eta1) -}
1d225f7fe71674f23f471d85cfc35fcc
  $fReadErr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ErrM.$fReadErr3) -}
d0595bf4416b66b70973786907902cdb
  $fReadErr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ok"#) -}
3b118599f640fccf0f6401ac0490b9fd
  $fReadErr4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ErrM.$fReadErr5) -}
9e7caa82d16c81c9958b0d04c73fd476
  $fReadErr5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bad"#) -}
63c3625a30c3d40aeaffe817cb907ed8
  $fReadErr6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fReadErr_$creadList ::
    GHC.Read.Read a => Text.ParserCombinators.ReadP.ReadS [ErrM.Err a]
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) ->
                 Text.ParserCombinators.ReadP.run
                   @ [ErrM.Err a]
                   (((GHC.Read.list
                        @ (ErrM.Err a)
                        (ErrM.$fReadErr1 @ a $dRead)
                          `cast`
                        ((<Text.ParserCombinators.ReadPrec.Prec>_R
                          ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                        <ErrM.Err
                                           a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <ErrM.Err a>_R)))
                       `cast`
                     (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[ErrM.Err a]>_R)
                       GHC.Read.$fRead()8)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <[ErrM.Err a]>_R)
                      @ [ErrM.Err a]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [ErrM.Err a]))) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fReadErr_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [ErrM.Err a]
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) ->
                 GHC.Read.list
                   @ (ErrM.Err a)
                   (ErrM.$fReadErr1 @ a $dRead)
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <ErrM.Err
                                      a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <ErrM.Err a>_R))) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fReadErr_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (ErrM.Err a)
  {- Arity: 2, Strictness: <L,U(A,A,C(C1(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (ErrM.Err a)
                   (ErrM.$fReadErr1
                      @ a
                      $dRead
                      n
                      @ (ErrM.Err a)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (ErrM.Err a)))) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fShowErr :: GHC.Show.Show a => GHC.Show.Show (ErrM.Err a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (ErrM.Err a)
                  (ErrM.$fShowErr_$cshowsPrec @ a v)
                  (ErrM.$fShowErr_$cshow @ a v)
                  (ErrM.$fShowErr_$cshowList @ a v) -}
cb5486bb16aea8c7c592afb1222be0c2
  $fShowErr1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8650415bc4ac0f820b65c216e0b0e64a
  $fShowErr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bad "#) -}
0faaf051246d2a7958fc208c7d42e893
  $fShowErr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ErrM.$fShowErr4) -}
68511aa81af87d5193b4a325fffea634
  $fShowErr4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ok "#) -}
9ff4758077f794befc3bd1b21aca61c3
  $fShowErr5 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fShowErr_$cshow ::
    GHC.Show.Show a => ErrM.Err a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) (x :: ErrM.Err a) ->
                 case x of wild {
                   ErrM.Ok b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        ErrM.$fShowErr3
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           ErrM.$fReadErr6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   ErrM.Bad b1
                   -> GHC.CString.unpackAppendCString#
                        ErrM.$fShowErr2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 ErrM.$fShowErr5)) }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fShowErr_$cshowList ::
    GHC.Show.Show a => [ErrM.Err a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [ErrM.Err a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ErrM.Err a)
                   (ErrM.$fShowErr_$cshowsPrec @ a $dShow ErrM.$fShowErr1)
                   ls
                   s) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $fShowErr_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> ErrM.Err a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: ErrM.Err a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 ErrM.$w$cshowsPrec @ a w ww1 w2 }) -}
4dec1732982000776f85e1db6c8a707f
  $tc'Bad :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   290343420594748858##
                   18235472777017506062##
                   ErrM.$trModule
                   ErrM.$tc'Bad2
                   1#
                   ErrM.$tc'Bad1) -}
87bf1983bdc77cddf6f99f618869602e
  $tc'Bad1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
722f2ec7ce033ac5912a4a0df5d29982
  $tc'Bad2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ErrM.$tc'Bad3) -}
981f4b4bad0c80ff21541612166021a5
  $tc'Bad3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Bad"#) -}
153df452eec86809e0235029201c36e1
  $tc'Ok :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10693580265681381534##
                   5210202493255958641##
                   ErrM.$trModule
                   ErrM.$tc'Ok2
                   1#
                   ErrM.$tc'Ok1) -}
cb00c9ccd92dac89586b8834ee48f3b2
  $tc'Ok1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1ba4cb936c9a6316c58d3b2cb7d5c792
  $tc'Ok2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ErrM.$tc'Ok3) -}
396965026f711ffb9a392e2311616295
  $tc'Ok3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ok"#) -}
4cf47ef8dfa269e451b0c40e95697bbc
  $tcErr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17007498507772367089##
                   3007853621380442405##
                   ErrM.$trModule
                   ErrM.$tcErr1
                   0#
                   GHC.Types.krep$*Arr*) -}
8a9894c4b8ea5f2cce69cb2e31fa6dd7
  $tcErr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ErrM.$tcErr2) -}
fb4cf9e8df954db669794c4c2d79b335
  $tcErr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Err"#) -}
d94023944d96d29b3c3b67ebfbb3165c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module ErrM.$trModule3 ErrM.$trModule1) -}
aae53291ac70b098114a5bef83746437
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ErrM.$trModule2) -}
321a528f8d6e6ccbf85a14a2a3145088
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrM"#) -}
fc1c4c01dca76d7d069b7b20147d8976
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ErrM.$trModule4) -}
c8d6f7c4e3feb360b44f01e65e08332a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LambdaNat-0.1.0.0-4B7roTwwXlI2zWJKCli09t"#) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> ErrM.Err a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: ErrM.Err a) ->
                 case w1 of wild {
                   ErrM.Ok b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w ErrM.$fReadErr6 b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char ErrM.$fShowErr3 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                ErrM.$fShowErr3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   ErrM.Bad b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             ErrM.$fShowErr2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                ErrM.$fShowErr2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x))))) } }) -}
ad25ec2d2de5d10f1e5da8cacfc24ac4
  data Err a = Ok a | Bad GHC.Base.String
instance [safe] GHC.Base.Alternative [ErrM.Err]
  = ErrM.$fAlternativeErr
instance [safe] GHC.Base.Applicative [ErrM.Err]
  = ErrM.$fApplicativeErr
instance [safe] GHC.Classes.Eq [ErrM.Err] = ErrM.$fEqErr
instance [safe] GHC.Base.Functor [ErrM.Err] = ErrM.$fFunctorErr
instance [safe] GHC.Base.Monad [ErrM.Err] = ErrM.$fMonadErr
instance [safe] GHC.Base.MonadPlus [ErrM.Err] = ErrM.$fMonadPlusErr
instance [safe] GHC.Classes.Ord [ErrM.Err] = ErrM.$fOrdErr
instance [safe] GHC.Read.Read [ErrM.Err] = ErrM.$fReadErr
instance [safe] GHC.Show.Show [ErrM.Err] = ErrM.$fShowErr
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

