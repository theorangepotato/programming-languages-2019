-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParLambdaNat.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pExp3 -> Exp3                               (3)
	%start_pExp4 -> Exp4                               (4)
	%start_pExp -> Exp                                 (5)
	Id -> L_Id                                         (6)
	Program -> Exp                                     (7)
	Exp1 -> '\\' Id '.' Exp                            (8)
	Exp1 -> Exp2                                       (9)
	Exp2 -> Exp2 Exp3                                  (10)
	Exp2 -> Exp3                                       (11)
	Exp3 -> '0'                                        (12)
	Exp3 -> 'S' Exp3                                   (13)
	Exp3 -> Exp4                                       (14)
	Exp4 -> Id                                         (15)
	Exp4 -> '(' Exp ')'                                (16)
	Exp -> Exp1                                        (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'.'            { PT _ (TS _ 3) }
	'0'            { PT _ (TS _ 4) }
	'S'            { PT _ (TS _ 5) }
	'\\'           { PT _ (TS _ 6) }
	L_Id           { PT _ (T_Id $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pExp3    rule  3
	%start_pExp4    rule  4
	%start_pExp     rule  5
	Id              rule  6
	Program         rule  7
	Exp1            rules 8, 9
	Exp2            rules 10, 11
	Exp3            rules 12, 13, 14
	Exp4            rules 15, 16
	Exp             rule  17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	L_Id           shift, and enter state 7

	Id             goto state 8
	Program        goto state 22
	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 23

State 1


	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp1           goto state 21
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12

State 2


	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp2           goto state 20
	Exp3           goto state 11
	Exp4           goto state 12

State 3


	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp3           goto state 19
	Exp4           goto state 12

State 4


	'('            shift, and enter state 14
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp4           goto state 18

State 5


	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 13

State 6


	L_Id           shift, and enter state 7


State 7

	Id -> L_Id .                                        (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'.'            reduce using rule 6
	'0'            reduce using rule 6
	'S'            reduce using rule 6
	L_Id           reduce using rule 6
	%eof           reduce using rule 6


State 8

	Exp4 -> Id .                                        (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'0'            reduce using rule 15
	'S'            reduce using rule 15
	L_Id           reduce using rule 15
	%eof           reduce using rule 15


State 9

	Exp -> Exp1 .                                       (rule 17)

	')'            reduce using rule 17
	%eof           reduce using rule 17


State 10

	Exp1 -> Exp2 .                                      (rule 9)
	Exp2 -> Exp2 . Exp3                                 (rule 10)

	'('            shift, and enter state 14
	')'            reduce using rule 9
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	L_Id           shift, and enter state 7
	%eof           reduce using rule 9

	Id             goto state 8
	Exp3           goto state 24
	Exp4           goto state 12

State 11

	Exp2 -> Exp3 .                                      (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'0'            reduce using rule 11
	'S'            reduce using rule 11
	L_Id           reduce using rule 11
	%eof           reduce using rule 11


State 12

	Exp3 -> Exp4 .                                      (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'0'            reduce using rule 14
	'S'            reduce using rule 14
	L_Id           reduce using rule 14
	%eof           reduce using rule 14


State 13

	%start_pExp -> Exp .                                (rule 5)

	%eof           accept


State 14

	Exp4 -> '(' . Exp ')'                               (rule 16)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 27

State 15

	Exp3 -> '0' .                                       (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'0'            reduce using rule 12
	'S'            reduce using rule 12
	L_Id           reduce using rule 12
	%eof           reduce using rule 12


State 16

	Exp3 -> 'S' . Exp3                                  (rule 13)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp3           goto state 26
	Exp4           goto state 12

State 17

	Exp1 -> '\\' . Id '.' Exp                           (rule 8)

	L_Id           shift, and enter state 7

	Id             goto state 25

State 18

	%start_pExp4 -> Exp4 .                              (rule 4)

	%eof           accept


State 19

	%start_pExp3 -> Exp3 .                              (rule 3)

	%eof           accept


State 20

	%start_pExp2 -> Exp2 .                              (rule 2)
	Exp2 -> Exp2 . Exp3                                 (rule 10)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	L_Id           shift, and enter state 7
	%eof           accept

	Id             goto state 8
	Exp3           goto state 24
	Exp4           goto state 12

State 21

	%start_pExp1 -> Exp1 .                              (rule 1)

	%eof           accept


State 22

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 23

	Program -> Exp .                                    (rule 7)

	%eof           reduce using rule 7


State 24

	Exp2 -> Exp2 Exp3 .                                 (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'0'            reduce using rule 10
	'S'            reduce using rule 10
	L_Id           reduce using rule 10
	%eof           reduce using rule 10


State 25

	Exp1 -> '\\' Id . '.' Exp                           (rule 8)

	'.'            shift, and enter state 29


State 26

	Exp3 -> 'S' Exp3 .                                  (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'0'            reduce using rule 13
	'S'            reduce using rule 13
	L_Id           reduce using rule 13
	%eof           reduce using rule 13


State 27

	Exp4 -> '(' Exp . ')'                               (rule 16)

	')'            shift, and enter state 28


State 28

	Exp4 -> '(' Exp ')' .                               (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'0'            reduce using rule 16
	'S'            reduce using rule 16
	L_Id           reduce using rule 16
	%eof           reduce using rule 16


State 29

	Exp1 -> '\\' Id '.' . Exp                           (rule 8)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	L_Id           shift, and enter state 7

	Id             goto state 8
	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 30

State 30

	Exp1 -> '\\' Id '.' Exp .                           (rule 8)

	')'            reduce using rule 8
	%eof           reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 7
Number of non-terminals: 13
Number of states: 31
