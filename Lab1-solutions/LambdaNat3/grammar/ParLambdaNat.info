-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParLambdaNat.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pExp3 -> Exp3                               (3)
	%start_pExp4 -> Exp4                               (4)
	%start_pExp5 -> Exp5                               (5)
	%start_pExp -> Exp                                 (6)
	Id -> L_Id                                         (7)
	Program -> Exp                                     (8)
	Exp1 -> '\\' Id '.' Exp                            (9)
	Exp1 -> Exp2                                       (10)
	Exp2 -> 'if' Exp '=' Exp 'then' Exp 'else' Exp     (11)
	Exp2 -> Exp3                                       (12)
	Exp3 -> Exp3 Exp4                                  (13)
	Exp3 -> Exp4                                       (14)
	Exp4 -> '0'                                        (15)
	Exp4 -> 'S' Exp4                                   (16)
	Exp4 -> Exp5                                       (17)
	Exp5 -> Id                                         (18)
	Exp5 -> '(' Exp ')'                                (19)
	Exp -> Exp1                                        (20)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'.'            { PT _ (TS _ 3) }
	'0'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'S'            { PT _ (TS _ 6) }
	'\\'           { PT _ (TS _ 7) }
	'else'         { PT _ (TS _ 8) }
	'if'           { PT _ (TS _ 9) }
	'then'         { PT _ (TS _ 10) }
	L_Id           { PT _ (T_Id $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pExp3    rule  3
	%start_pExp4    rule  4
	%start_pExp5    rule  5
	%start_pExp     rule  6
	Id              rule  7
	Program         rule  8
	Exp1            rules 9, 10
	Exp2            rules 11, 12
	Exp3            rules 13, 14
	Exp4            rules 15, 16, 17
	Exp5            rules 18, 19
	Exp             rule  20

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Program        goto state 26
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 27

State 1


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 25
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14

State 2


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp2           goto state 24
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14

State 3


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp3           goto state 23
	Exp4           goto state 13
	Exp5           goto state 14

State 4


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp4           goto state 22
	Exp5           goto state 14

State 5


	'('            shift, and enter state 16
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp5           goto state 21

State 6


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 15

State 7


	L_Id           shift, and enter state 8


State 8

	Id -> L_Id .                                        (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	'.'            reduce using rule 7
	'0'            reduce using rule 7
	'='            reduce using rule 7
	'S'            reduce using rule 7
	'else'         reduce using rule 7
	'then'         reduce using rule 7
	L_Id           reduce using rule 7
	%eof           reduce using rule 7


State 9

	Exp5 -> Id .                                        (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'0'            reduce using rule 18
	'='            reduce using rule 18
	'S'            reduce using rule 18
	'else'         reduce using rule 18
	'then'         reduce using rule 18
	L_Id           reduce using rule 18
	%eof           reduce using rule 18


State 10

	Exp -> Exp1 .                                       (rule 20)

	')'            reduce using rule 20
	'='            reduce using rule 20
	'else'         reduce using rule 20
	'then'         reduce using rule 20
	%eof           reduce using rule 20


State 11

	Exp1 -> Exp2 .                                      (rule 10)

	')'            reduce using rule 10
	'='            reduce using rule 10
	'else'         reduce using rule 10
	'then'         reduce using rule 10
	%eof           reduce using rule 10


State 12

	Exp2 -> Exp3 .                                      (rule 12)
	Exp3 -> Exp3 . Exp4                                 (rule 13)

	'('            shift, and enter state 16
	')'            reduce using rule 12
	'0'            shift, and enter state 17
	'='            reduce using rule 12
	'S'            shift, and enter state 18
	'else'         reduce using rule 12
	'then'         reduce using rule 12
	L_Id           shift, and enter state 8
	%eof           reduce using rule 12

	Id             goto state 9
	Exp4           goto state 28
	Exp5           goto state 14

State 13

	Exp3 -> Exp4 .                                      (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'0'            reduce using rule 14
	'='            reduce using rule 14
	'S'            reduce using rule 14
	'else'         reduce using rule 14
	'then'         reduce using rule 14
	L_Id           reduce using rule 14
	%eof           reduce using rule 14


State 14

	Exp4 -> Exp5 .                                      (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'0'            reduce using rule 17
	'='            reduce using rule 17
	'S'            reduce using rule 17
	'else'         reduce using rule 17
	'then'         reduce using rule 17
	L_Id           reduce using rule 17
	%eof           reduce using rule 17


State 15

	%start_pExp -> Exp .                                (rule 6)

	%eof           accept


State 16

	Exp5 -> '(' . Exp ')'                               (rule 19)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 32

State 17

	Exp4 -> '0' .                                       (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'0'            reduce using rule 15
	'='            reduce using rule 15
	'S'            reduce using rule 15
	'else'         reduce using rule 15
	'then'         reduce using rule 15
	L_Id           reduce using rule 15
	%eof           reduce using rule 15


State 18

	Exp4 -> 'S' . Exp4                                  (rule 16)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp4           goto state 31
	Exp5           goto state 14

State 19

	Exp1 -> '\\' . Id '.' Exp                           (rule 9)

	L_Id           shift, and enter state 8

	Id             goto state 30

State 20

	Exp2 -> 'if' . Exp '=' Exp 'then' Exp 'else' Exp    (rule 11)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 29

State 21

	%start_pExp5 -> Exp5 .                              (rule 5)

	%eof           accept


State 22

	%start_pExp4 -> Exp4 .                              (rule 4)

	%eof           accept


State 23

	%start_pExp3 -> Exp3 .                              (rule 3)
	Exp3 -> Exp3 . Exp4                                 (rule 13)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8
	%eof           accept

	Id             goto state 9
	Exp4           goto state 28
	Exp5           goto state 14

State 24

	%start_pExp2 -> Exp2 .                              (rule 2)

	%eof           accept


State 25

	%start_pExp1 -> Exp1 .                              (rule 1)

	%eof           accept


State 26

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 27

	Program -> Exp .                                    (rule 8)

	%eof           reduce using rule 8


State 28

	Exp3 -> Exp3 Exp4 .                                 (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'0'            reduce using rule 13
	'='            reduce using rule 13
	'S'            reduce using rule 13
	'else'         reduce using rule 13
	'then'         reduce using rule 13
	L_Id           reduce using rule 13
	%eof           reduce using rule 13


State 29

	Exp2 -> 'if' Exp . '=' Exp 'then' Exp 'else' Exp    (rule 11)

	'='            shift, and enter state 35


State 30

	Exp1 -> '\\' Id . '.' Exp                           (rule 9)

	'.'            shift, and enter state 34


State 31

	Exp4 -> 'S' Exp4 .                                  (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'0'            reduce using rule 16
	'='            reduce using rule 16
	'S'            reduce using rule 16
	'else'         reduce using rule 16
	'then'         reduce using rule 16
	L_Id           reduce using rule 16
	%eof           reduce using rule 16


State 32

	Exp5 -> '(' Exp . ')'                               (rule 19)

	')'            shift, and enter state 33


State 33

	Exp5 -> '(' Exp ')' .                               (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'0'            reduce using rule 19
	'='            reduce using rule 19
	'S'            reduce using rule 19
	'else'         reduce using rule 19
	'then'         reduce using rule 19
	L_Id           reduce using rule 19
	%eof           reduce using rule 19


State 34

	Exp1 -> '\\' Id '.' . Exp                           (rule 9)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 37

State 35

	Exp2 -> 'if' Exp '=' . Exp 'then' Exp 'else' Exp    (rule 11)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 36

State 36

	Exp2 -> 'if' Exp '=' Exp . 'then' Exp 'else' Exp    (rule 11)

	'then'         shift, and enter state 38


State 37

	Exp1 -> '\\' Id '.' Exp .                           (rule 9)

	')'            reduce using rule 9
	'='            reduce using rule 9
	'else'         reduce using rule 9
	'then'         reduce using rule 9
	%eof           reduce using rule 9


State 38

	Exp2 -> 'if' Exp '=' Exp 'then' . Exp 'else' Exp    (rule 11)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 39

State 39

	Exp2 -> 'if' Exp '=' Exp 'then' Exp . 'else' Exp    (rule 11)

	'else'         shift, and enter state 40


State 40

	Exp2 -> 'if' Exp '=' Exp 'then' Exp 'else' . Exp    (rule 11)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	'if'           shift, and enter state 20
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Exp5           goto state 14
	Exp            goto state 41

State 41

	Exp2 -> 'if' Exp '=' Exp 'then' Exp 'else' Exp .    (rule 11)

	')'            reduce using rule 11
	'='            reduce using rule 11
	'else'         reduce using rule 11
	'then'         reduce using rule 11
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 21
Number of terminals: 11
Number of non-terminals: 15
Number of states: 42
