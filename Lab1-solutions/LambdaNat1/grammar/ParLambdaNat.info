-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParLambdaNat.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pExp3 -> Exp3                               (3)
	%start_pExp4 -> Exp4                               (4)
	%start_pNat -> Nat                                 (5)
	%start_pExp -> Exp                                 (6)
	Id -> L_Id                                         (7)
	Program -> Exp                                     (8)
	Exp1 -> '\\' Id '.' Exp                            (9)
	Exp1 -> Exp2                                       (10)
	Exp2 -> Exp2 Exp3                                  (11)
	Exp2 -> Exp3                                       (12)
	Exp3 -> Id                                         (13)
	Exp3 -> Exp4                                       (14)
	Exp4 -> Nat                                        (15)
	Exp4 -> '(' Exp ')'                                (16)
	Nat -> '0'                                         (17)
	Nat -> 'S' Nat                                     (18)
	Exp -> Exp1                                        (19)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'.'            { PT _ (TS _ 3) }
	'0'            { PT _ (TS _ 4) }
	'S'            { PT _ (TS _ 5) }
	'\\'           { PT _ (TS _ 6) }
	L_Id           { PT _ (T_Id $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pExp3    rule  3
	%start_pExp4    rule  4
	%start_pNat     rule  5
	%start_pExp     rule  6
	Id              rule  7
	Program         rule  8
	Exp1            rules 9, 10
	Exp2            rules 11, 12
	Exp3            rules 13, 14
	Exp4            rules 15, 16
	Nat             rules 17, 18
	Exp             rule  19

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	L_Id           shift, and enter state 8

	Id             goto state 9
	Program        goto state 25
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Nat            goto state 14
	Exp            goto state 26

State 1


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 24
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Nat            goto state 14

State 2


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp2           goto state 23
	Exp3           goto state 12
	Exp4           goto state 13
	Nat            goto state 14

State 3


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp3           goto state 22
	Exp4           goto state 13
	Nat            goto state 14

State 4


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18

	Exp4           goto state 21
	Nat            goto state 14

State 5


	'0'            shift, and enter state 17
	'S'            shift, and enter state 18

	Nat            goto state 20

State 6


	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Nat            goto state 14
	Exp            goto state 15

State 7


	L_Id           shift, and enter state 8


State 8

	Id -> L_Id .                                        (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	'.'            reduce using rule 7
	'0'            reduce using rule 7
	'S'            reduce using rule 7
	L_Id           reduce using rule 7
	%eof           reduce using rule 7


State 9

	Exp3 -> Id .                                        (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'0'            reduce using rule 13
	'S'            reduce using rule 13
	L_Id           reduce using rule 13
	%eof           reduce using rule 13


State 10

	Exp -> Exp1 .                                       (rule 19)

	')'            reduce using rule 19
	%eof           reduce using rule 19


State 11

	Exp1 -> Exp2 .                                      (rule 10)
	Exp2 -> Exp2 . Exp3                                 (rule 11)

	'('            shift, and enter state 16
	')'            reduce using rule 10
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8
	%eof           reduce using rule 10

	Id             goto state 9
	Exp3           goto state 27
	Exp4           goto state 13
	Nat            goto state 14

State 12

	Exp2 -> Exp3 .                                      (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'0'            reduce using rule 12
	'S'            reduce using rule 12
	L_Id           reduce using rule 12
	%eof           reduce using rule 12


State 13

	Exp3 -> Exp4 .                                      (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'0'            reduce using rule 14
	'S'            reduce using rule 14
	L_Id           reduce using rule 14
	%eof           reduce using rule 14


State 14

	Exp4 -> Nat .                                       (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'0'            reduce using rule 15
	'S'            reduce using rule 15
	L_Id           reduce using rule 15
	%eof           reduce using rule 15


State 15

	%start_pExp -> Exp .                                (rule 6)

	%eof           accept


State 16

	Exp4 -> '(' . Exp ')'                               (rule 16)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Nat            goto state 14
	Exp            goto state 30

State 17

	Nat -> '0' .                                        (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'0'            reduce using rule 17
	'S'            reduce using rule 17
	L_Id           reduce using rule 17
	%eof           reduce using rule 17


State 18

	Nat -> 'S' . Nat                                    (rule 18)

	'0'            shift, and enter state 17
	'S'            shift, and enter state 18

	Nat            goto state 29

State 19

	Exp1 -> '\\' . Id '.' Exp                           (rule 9)

	L_Id           shift, and enter state 8

	Id             goto state 28

State 20

	%start_pNat -> Nat .                                (rule 5)

	%eof           accept


State 21

	%start_pExp4 -> Exp4 .                              (rule 4)

	%eof           accept


State 22

	%start_pExp3 -> Exp3 .                              (rule 3)

	%eof           accept


State 23

	%start_pExp2 -> Exp2 .                              (rule 2)
	Exp2 -> Exp2 . Exp3                                 (rule 11)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	L_Id           shift, and enter state 8
	%eof           accept

	Id             goto state 9
	Exp3           goto state 27
	Exp4           goto state 13
	Nat            goto state 14

State 24

	%start_pExp1 -> Exp1 .                              (rule 1)

	%eof           accept


State 25

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 26

	Program -> Exp .                                    (rule 8)

	%eof           reduce using rule 8


State 27

	Exp2 -> Exp2 Exp3 .                                 (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'0'            reduce using rule 11
	'S'            reduce using rule 11
	L_Id           reduce using rule 11
	%eof           reduce using rule 11


State 28

	Exp1 -> '\\' Id . '.' Exp                           (rule 9)

	'.'            shift, and enter state 32


State 29

	Nat -> 'S' Nat .                                    (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'0'            reduce using rule 18
	'S'            reduce using rule 18
	L_Id           reduce using rule 18
	%eof           reduce using rule 18


State 30

	Exp4 -> '(' Exp . ')'                               (rule 16)

	')'            shift, and enter state 31


State 31

	Exp4 -> '(' Exp ')' .                               (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'0'            reduce using rule 16
	'S'            reduce using rule 16
	L_Id           reduce using rule 16
	%eof           reduce using rule 16


State 32

	Exp1 -> '\\' Id '.' . Exp                           (rule 9)

	'('            shift, and enter state 16
	'0'            shift, and enter state 17
	'S'            shift, and enter state 18
	'\\'           shift, and enter state 19
	L_Id           shift, and enter state 8

	Id             goto state 9
	Exp1           goto state 10
	Exp2           goto state 11
	Exp3           goto state 12
	Exp4           goto state 13
	Nat            goto state 14
	Exp            goto state 33

State 33

	Exp1 -> '\\' Id '.' Exp .                           (rule 9)

	')'            reduce using rule 9
	%eof           reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 20
Number of terminals: 7
Number of non-terminals: 15
Number of states: 34
