---------------------------------------
-- Lambda Calculus with Natural Numbers
---------------------------------------

Prog.   Program ::= Exp ; -- this first line is redundant
EAbs.   Exp1 ::= "\\" Id "." Exp ;  -- in effect: "\" Id "." Exp ; -- btw, pronounce "\" as "lambda" in this context
EApp.   Exp2 ::= Exp2 Exp3 ; -- application associates on the left
EVar.   Exp3 ::= Id ;
ENat.   Exp4 ::= Nat ; 
Nat0.   Nat ::= "0" ;
NatS.   Nat ::= "S" Nat ; -- "S" is now a terminal and cannot be parsed (or lexed) as an identifier (variable)

coercions Exp 4 ;

token Id (letter (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;

----------------------------------------------
----------------------------------------------
-- parse the following expressions by running 
--   ./TestLambdaNat test.lc 
-- in the terminal in the directory where you have TestLambdaNat
-- and where test.lc contains any one of the expressions below.
-- Verify that the following statements are correct:
--
-- S 0 is a number 
-- S0 is a variable
-- S S 0 is a number
-- S (S 0) and S x are not legal expressions
-- \x.x x x equals \x. ((x x) x) -- the empty spaces between the x are important (why?)
-- (\x.x) x x equals (((\x.x) x) x) 
-- (\x.x) S 0 equals (\x.x) (S 0) 
--
-- Btw, I say that two strings are equal if they produce the same parse tree (abstract syntax tree)
----------------------------------------------
----------------------------------------------
