
==================== FINAL INTERFACE ====================
2019-09-09 22:57:20.612701 UTC

interface Lambda-0.1.0.0-EqpDae84VpUAAE1gCYSPw8:LexLambda 8064
  interface hash: 6fd1f6bb1362ea8a4644966183371f5f
  ABI hash: 3938be95f9b68f47c40c5213f5eebbc0
  export-list hash: 310826a62a657afd45a47135351a479d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ac311d4123842b7cf4fcf7c2651d9e29
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  LexLambda.alexGetByte
  LexLambda.alexIndexInt16OffAddr
  LexLambda.alexIndexInt32OffAddr
  LexLambda.alexInputPrevChar
  LexLambda.alexMove
  LexLambda.alexScan
  LexLambda.alexScanUser
  LexLambda.alexStartPos
  LexLambda.alex_accept
  LexLambda.alex_action_3
  LexLambda.alex_action_4
  LexLambda.alex_action_5
  LexLambda.alex_actions
  LexLambda.alex_base
  LexLambda.alex_check
  LexLambda.alex_deflt
  LexLambda.alex_scan_tkn
  LexLambda.alex_tab_size
  LexLambda.alex_table
  LexLambda.eitherResIdent
  LexLambda.mkPosToken
  LexLambda.posLineCol
  LexLambda.prToken
  LexLambda.printPosn
  LexLambda.quickIndex
  LexLambda.resWords
  LexLambda.share
  LexLambda.tok
  LexLambda.tokenLineCol
  LexLambda.tokenPos
  LexLambda.tokenPosn
  LexLambda.tokens
  LexLambda.unescapeInitTail
  LexLambda.utf8Encode
  LexLambda.AlexAcc{LexLambda.AlexAcc LexLambda.AlexAccNone LexLambda.AlexAccSkip}
  LexLambda.AlexAddr{LexLambda.AlexA#}
  LexLambda.AlexInput
  LexLambda.AlexLastAcc{LexLambda.AlexLastAcc LexLambda.AlexLastSkip LexLambda.AlexNone}
  LexLambda.AlexReturn{LexLambda.AlexEOF LexLambda.AlexError LexLambda.AlexSkip LexLambda.AlexToken}
  LexLambda.BTree{LexLambda.B LexLambda.N}
  LexLambda.Byte
  LexLambda.Posn{LexLambda.Pn}
  LexLambda.Tok{LexLambda.TC LexLambda.TD LexLambda.TI LexLambda.TL LexLambda.TS LexLambda.TV LexLambda.T_Id}
  LexLambda.Token{LexLambda.Err LexLambda.PT}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Exts base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  array-0.5.3.0:Data.Array 92f4b3399a96adb44649ce9a9d6cd419
import  -/  array-0.5.3.0:Data.Array.Base ede05b091fefc604cd572a3818a902f4
import  -/  base-4.12.0.0:Data.Bits 64fdef6c05b11e33e007318d457467e9
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Word 6b968b6c7df442cfcad986e497aee095
import  -/  base-4.12.0.0:GHC.Arr ec26aa94fff9ed31a6fa85d884b35f3c
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.Exts 5176e66011d4902498d2e6a4020ba73d
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
addDependentFile "/Users/alexanderkurz/.stack/programs/x86_64-osx/ghc-8.6.4/lib/ghc-8.6.4/include/ghcconfig.h" 83d1bd0114cd44e9fff29c5f0a098afa
addDependentFile "/Users/alexanderkurz/.stack/programs/x86_64-osx/ghc-8.6.4/lib/ghc-8.6.4/include/ghcplatform.h" 60adb07a5d725ed8b935e01724cb18af
addDependentFile "/Users/alexanderkurz/.stack/programs/x86_64-osx/ghc-8.6.4/lib/ghc-8.6.4/include/ghcautoconf.h" 518c177617453a9753cf8b97426afd27
addDependentFile "/Users/alexanderkurz/.stack/programs/x86_64-osx/ghc-8.6.4/lib/ghc-8.6.4/include/ghcversion.h" a0ce8aeb7f525f4d70decd6c1d3ca2dd
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.4.0.1/build/autogen/cabal_macros.h" b4f4bb90176e7bd1b3ab91010c7596f0
11d476d4f7d185553f303e0cdca1b634
  $fEqPosn :: GHC.Classes.Eq LexLambda.Posn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Posn LexLambda.$fEqPosn_$c== LexLambda.$fEqPosn_$c/= -}
11d476d4f7d185553f303e0cdca1b634
  $fEqPosn_$c/= :: LexLambda.Posn -> LexLambda.Posn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: LexLambda.Posn) (y :: LexLambda.Posn) ->
                 case x of wild { LexLambda.Pn dt dt1 dt2 ->
                 case y of wild1 { LexLambda.Pn dt3 dt4 dt5 ->
                 case GHC.Prim.==# dt dt3 of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Prim.==# dt1 dt4 of lwild1 {
                        DEFAULT -> GHC.Types.True
                        1#
                        -> case GHC.Prim.==# dt2 dt5 of lwild2 {
                             DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } } }) -}
11d476d4f7d185553f303e0cdca1b634
  $fEqPosn_$c== :: LexLambda.Posn -> LexLambda.Posn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: LexLambda.Posn) (ds1 :: LexLambda.Posn) ->
                 case ds of wild { LexLambda.Pn dt dt1 dt2 ->
                 case ds1 of wild1 { LexLambda.Pn dt3 dt4 dt5 ->
                 case GHC.Prim.==# dt dt3 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.Prim.==# dt1 dt4 of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt2 dt5) } } } }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fEqTok :: GHC.Classes.Eq LexLambda.Tok
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Tok LexLambda.$fEqTok_$c== LexLambda.$fEqTok_$c/= -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fEqTok_$c/= :: LexLambda.Tok -> LexLambda.Tok -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: LexLambda.Tok) (y :: LexLambda.Tok) ->
                 case LexLambda.$fEqTok_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fEqTok_$c== :: LexLambda.Tok -> LexLambda.Tok -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: LexLambda.Tok) (ds1 :: LexLambda.Tok) ->
                 case ds of wild {
                   LexLambda.TS a1 dt
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        LexLambda.TS b1 dt1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) } }
                   LexLambda.TL a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        LexLambda.TL b1 -> GHC.Base.eqString a1 b1 }
                   LexLambda.TI a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        LexLambda.TI b1 -> GHC.Base.eqString a1 b1 }
                   LexLambda.TV a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        LexLambda.TV b1 -> GHC.Base.eqString a1 b1 }
                   LexLambda.TD a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        LexLambda.TD b1 -> GHC.Base.eqString a1 b1 }
                   LexLambda.TC a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        LexLambda.TC b1 -> GHC.Base.eqString a1 b1 }
                   LexLambda.T_Id a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        LexLambda.T_Id b1 -> GHC.Base.eqString a1 b1 } }) -}
9365c1aa5845747e7c235a441cc9081a
  $fEqToken :: GHC.Classes.Eq LexLambda.Token
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Token
                  LexLambda.$fEqToken_$c==
                  LexLambda.$fEqToken_$c/= -}
9365c1aa5845747e7c235a441cc9081a
  $fEqToken_$c/= ::
    LexLambda.Token -> LexLambda.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: LexLambda.Token) (y :: LexLambda.Token) ->
                 case LexLambda.$fEqToken_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9365c1aa5845747e7c235a441cc9081a
  $fEqToken_$c== ::
    LexLambda.Token -> LexLambda.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: LexLambda.Token) (ds1 :: LexLambda.Token) ->
                 case ds of wild {
                   LexLambda.PT a1 a2
                   -> case ds1 of wild1 {
                        LexLambda.PT b1 b2
                        -> case a1 of wild2 { LexLambda.Pn dt dt1 dt2 ->
                           case b1 of wild3 { LexLambda.Pn dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt dt3 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case GHC.Prim.==# dt1 dt4 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case GHC.Prim.==# dt2 dt5 of lwild2 {
                                       DEFAULT -> GHC.Types.False
                                       1# -> LexLambda.$fEqTok_$c== a2 b2 } } } } }
                        LexLambda.Err ipv -> GHC.Types.False }
                   LexLambda.Err a1
                   -> case ds1 of wild1 {
                        LexLambda.PT ipv ipv1 -> GHC.Types.False
                        LexLambda.Err b1 -> LexLambda.$fEqPosn_$c== a1 b1 } }) -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn :: GHC.Classes.Ord LexLambda.Posn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Posn
                  LexLambda.$fEqPosn
                  LexLambda.$fOrdPosn_$ccompare
                  LexLambda.$fOrdPosn_$c<
                  LexLambda.$fOrdPosn_$c<=
                  LexLambda.$fOrdPosn_$c>
                  LexLambda.$fOrdPosn_$c>=
                  LexLambda.$fOrdPosn_$cmax
                  LexLambda.$fOrdPosn_$cmin -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn_$c< :: LexLambda.Posn -> LexLambda.Posn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: LexLambda.Posn) (w1 :: LexLambda.Posn) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 case w1 of ww4 { LexLambda.Pn ww5 ww6 ww7 ->
                 LexLambda.$w$c< ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn_$c<= ::
    LexLambda.Posn -> LexLambda.Posn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: LexLambda.Posn) (w1 :: LexLambda.Posn) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 case w1 of ww4 { LexLambda.Pn ww5 ww6 ww7 ->
                 LexLambda.$w$c<= ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn_$c> :: LexLambda.Posn -> LexLambda.Posn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: LexLambda.Posn) (b :: LexLambda.Posn) ->
                 LexLambda.$fOrdPosn_$c< b a) -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn_$c>= ::
    LexLambda.Posn -> LexLambda.Posn -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: LexLambda.Posn) (w1 :: LexLambda.Posn) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 case w1 of ww4 { LexLambda.Pn ww5 ww6 ww7 ->
                 LexLambda.$w$c>= ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn_$ccompare ::
    LexLambda.Posn -> LexLambda.Posn -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: LexLambda.Posn) (w1 :: LexLambda.Posn) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 case w1 of ww4 { LexLambda.Pn ww5 ww6 ww7 ->
                 LexLambda.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn_$cmax ::
    LexLambda.Posn -> LexLambda.Posn -> LexLambda.Posn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: LexLambda.Posn) (w1 :: LexLambda.Posn) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 case w1 of ww4 { LexLambda.Pn ww5 ww6 ww7 ->
                 case GHC.Prim.<# ww5 ww1 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww5 ww1 of lwild1 {
                        DEFAULT -> LexLambda.Pn ww5 ww6 ww7
                        1#
                        -> case GHC.Prim.<# ww6 ww2 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# ww6 ww2 of lwild3 {
                                  DEFAULT -> LexLambda.Pn ww5 ww6 ww7
                                  1#
                                  -> case GHC.Prim.<# ww7 ww3 of lwild4 {
                                       DEFAULT -> LexLambda.Pn ww5 ww6 ww7
                                       1# -> LexLambda.Pn ww1 ww2 ww3 } }
                             1# -> LexLambda.Pn ww1 ww2 ww3 } }
                   1# -> LexLambda.Pn ww1 ww2 ww3 } } }) -}
11d476d4f7d185553f303e0cdca1b634
  $fOrdPosn_$cmin ::
    LexLambda.Posn -> LexLambda.Posn -> LexLambda.Posn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: LexLambda.Posn) (w1 :: LexLambda.Posn) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 case w1 of ww4 { LexLambda.Pn ww5 ww6 ww7 ->
                 case GHC.Prim.<# ww5 ww1 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww5 ww1 of lwild1 {
                        DEFAULT -> LexLambda.Pn ww1 ww2 ww3
                        1#
                        -> case GHC.Prim.<# ww6 ww2 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# ww6 ww2 of lwild3 {
                                  DEFAULT -> LexLambda.Pn ww1 ww2 ww3
                                  1#
                                  -> case GHC.Prim.<# ww7 ww3 of lwild4 {
                                       DEFAULT -> LexLambda.Pn ww1 ww2 ww3
                                       1# -> LexLambda.Pn ww5 ww6 ww7 } }
                             1# -> LexLambda.Pn ww5 ww6 ww7 } }
                   1# -> LexLambda.Pn ww5 ww6 ww7 } } }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok :: GHC.Classes.Ord LexLambda.Tok
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Tok
                  LexLambda.$fEqTok
                  LexLambda.$fOrdTok_$ccompare
                  LexLambda.$fOrdTok_$c<
                  LexLambda.$fOrdTok_$c<=
                  LexLambda.$fOrdTok_$c>
                  LexLambda.$fOrdTok_$c>=
                  LexLambda.$fOrdTok_$cmax
                  LexLambda.$fOrdTok_$cmin -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok_$c< :: LexLambda.Tok -> LexLambda.Tok -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Tok) (y :: LexLambda.Tok) ->
                 case LexLambda.$fOrdTok_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok_$c<= :: LexLambda.Tok -> LexLambda.Tok -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Tok) (y :: LexLambda.Tok) ->
                 case LexLambda.$fOrdTok_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok_$c> :: LexLambda.Tok -> LexLambda.Tok -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Tok) (y :: LexLambda.Tok) ->
                 case LexLambda.$fOrdTok_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok_$c>= :: LexLambda.Tok -> LexLambda.Tok -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Tok) (y :: LexLambda.Tok) ->
                 case LexLambda.$fOrdTok_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok_$ccompare ::
    LexLambda.Tok -> LexLambda.Tok -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: LexLambda.Tok) (b :: LexLambda.Tok) ->
                 case a of wild {
                   LexLambda.TS a1 dt
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        LexLambda.TS b1 dt1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compareInt# dt dt1
                             GHC.Types.GT -> GHC.Types.GT } }
                   LexLambda.TL a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        LexLambda.TS ds dt -> GHC.Types.GT
                        LexLambda.TL b1 -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 }
                   LexLambda.TI a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        LexLambda.TI ds -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 ds
                        LexLambda.TV ds -> GHC.Types.LT
                        LexLambda.TD ds -> GHC.Types.LT
                        LexLambda.TC ds -> GHC.Types.LT
                        LexLambda.T_Id ds -> GHC.Types.LT }
                   LexLambda.TV a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        LexLambda.TV ds -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 ds
                        LexLambda.TD ds -> GHC.Types.LT
                        LexLambda.TC ds -> GHC.Types.LT
                        LexLambda.T_Id ds -> GHC.Types.LT }
                   LexLambda.TD a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        LexLambda.TD ds -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 ds
                        LexLambda.TC ds -> GHC.Types.LT
                        LexLambda.T_Id ds -> GHC.Types.LT }
                   LexLambda.TC a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        LexLambda.TC b1 -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1
                        LexLambda.T_Id ds -> GHC.Types.LT }
                   LexLambda.T_Id a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        LexLambda.T_Id b1 -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 } }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok_$cmax :: LexLambda.Tok -> LexLambda.Tok -> LexLambda.Tok
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Tok) (y :: LexLambda.Tok) ->
                 case LexLambda.$fOrdTok_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fOrdTok_$cmin :: LexLambda.Tok -> LexLambda.Tok -> LexLambda.Tok
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Tok) (y :: LexLambda.Tok) ->
                 case LexLambda.$fOrdTok_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken :: GHC.Classes.Ord LexLambda.Token
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Token
                  LexLambda.$fEqToken
                  LexLambda.$fOrdToken_$ccompare
                  LexLambda.$fOrdToken_$c<
                  LexLambda.$fOrdToken_$c<=
                  LexLambda.$fOrdToken_$c>
                  LexLambda.$fOrdToken_$c>=
                  LexLambda.$fOrdToken_$cmax
                  LexLambda.$fOrdToken_$cmin -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken_$c< ::
    LexLambda.Token -> LexLambda.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: LexLambda.Token) (b :: LexLambda.Token) ->
                 case a of wild {
                   LexLambda.PT a1 a2
                   -> case b of wild1 {
                        LexLambda.PT b1 b2
                        -> case a1 of wild2 { LexLambda.Pn dt dt1 dt2 ->
                           case b1 of wild3 { LexLambda.Pn dt3 dt4 dt5 ->
                           case GHC.Prim.<# dt dt3 of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# dt dt3 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case GHC.Prim.<# dt1 dt4 of lwild2 {
                                       DEFAULT
                                       -> case GHC.Prim.==# dt1 dt4 of lwild3 {
                                            DEFAULT -> GHC.Types.False
                                            1#
                                            -> case GHC.Prim.<# dt2 dt5 of lwild4 {
                                                 DEFAULT
                                                 -> case GHC.Prim.==# dt2 dt5 of lwild5 {
                                                      DEFAULT -> GHC.Types.False
                                                      1# -> LexLambda.$fOrdTok_$c< a2 b2 }
                                                 1# -> GHC.Types.True } }
                                       1# -> GHC.Types.True } }
                             1# -> GHC.Types.True } } }
                        LexLambda.Err ipv -> GHC.Types.True }
                   LexLambda.Err a1
                   -> case b of wild1 {
                        LexLambda.PT ipv ipv1 -> GHC.Types.False
                        LexLambda.Err b1 -> LexLambda.$fOrdPosn_$c< a1 b1 } }) -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken_$c<= ::
    LexLambda.Token -> LexLambda.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: LexLambda.Token) (b :: LexLambda.Token) ->
                 case LexLambda.$fOrdToken_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken_$c> ::
    LexLambda.Token -> LexLambda.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: LexLambda.Token) (b :: LexLambda.Token) ->
                 LexLambda.$fOrdToken_$c< b a) -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken_$c>= ::
    LexLambda.Token -> LexLambda.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: LexLambda.Token) (b :: LexLambda.Token) ->
                 case LexLambda.$fOrdToken_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken_$ccompare ::
    LexLambda.Token -> LexLambda.Token -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: LexLambda.Token) (b :: LexLambda.Token) ->
                 case a of wild {
                   LexLambda.PT a1 a2
                   -> case b of wild1 {
                        LexLambda.PT b1 b2
                        -> case a1 of wild2 { LexLambda.Pn dt dt1 dt2 ->
                           case b1 of wild3 { LexLambda.Pn dt3 dt4 dt5 ->
                           case GHC.Prim.<# dt dt3 of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# dt dt3 of lwild1 {
                                  DEFAULT -> GHC.Types.GT
                                  1#
                                  -> case GHC.Prim.<# dt1 dt4 of lwild2 {
                                       DEFAULT
                                       -> case GHC.Prim.==# dt1 dt4 of lwild3 {
                                            DEFAULT -> GHC.Types.GT
                                            1#
                                            -> case GHC.Prim.<# dt2 dt5 of lwild4 {
                                                 DEFAULT
                                                 -> case GHC.Prim.==# dt2 dt5 of lwild5 {
                                                      DEFAULT -> GHC.Types.GT
                                                      1# -> LexLambda.$fOrdTok_$ccompare a2 b2 }
                                                 1# -> GHC.Types.LT } }
                                       1# -> GHC.Types.LT } }
                             1# -> GHC.Types.LT } } }
                        LexLambda.Err ipv -> GHC.Types.LT }
                   LexLambda.Err a1
                   -> case b of wild1 {
                        LexLambda.PT ipv ipv1 -> GHC.Types.GT
                        LexLambda.Err b1 -> LexLambda.$fOrdPosn_$ccompare a1 b1 } }) -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken_$cmax ::
    LexLambda.Token -> LexLambda.Token -> LexLambda.Token
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Token) (y :: LexLambda.Token) ->
                 case LexLambda.$fOrdToken_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
9365c1aa5845747e7c235a441cc9081a
  $fOrdToken_$cmin ::
    LexLambda.Token -> LexLambda.Token -> LexLambda.Token
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: LexLambda.Token) (y :: LexLambda.Token) ->
                 case LexLambda.$fOrdToken_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
8567983dab9b2f86fd2116f426c7deee
  $fShowBTree :: GHC.Show.Show LexLambda.BTree
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.BTree
                  LexLambda.$fShowBTree_$cshowsPrec
                  LexLambda.$fShowBTree_$cshow
                  LexLambda.$fShowBTree_$cshowList -}
8567983dab9b2f86fd2116f426c7deee
  $fShowBTree1 :: LexLambda.BTree -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (LexLambda.$fShowBTree_$cshowsPrec
                   LexLambda.$fShowBTree2) -}
33b12445942aad51aad7114f4c9bf27c
  $fShowBTree2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8567983dab9b2f86fd2116f426c7deee
  $fShowBTree_$cshow :: LexLambda.BTree -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: LexLambda.BTree) ->
                 LexLambda.$fShowBTree_$cshowsPrec
                   LexLambda.$fShowBTree2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8567983dab9b2f86fd2116f426c7deee
  $fShowBTree_$cshowList :: [LexLambda.BTree] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [LexLambda.BTree]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ LexLambda.BTree
                   LexLambda.$fShowBTree1
                   ls
                   s) -}
8567983dab9b2f86fd2116f426c7deee
  $fShowBTree_$cshowsPrec ::
    GHC.Types.Int -> LexLambda.BTree -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
11d476d4f7d185553f303e0cdca1b634
  $fShowPosn :: GHC.Show.Show LexLambda.Posn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Posn
                  LexLambda.$fShowPosn_$cshowsPrec
                  LexLambda.$fShowPosn_$cshow
                  LexLambda.$fShowPosn_$cshowList -}
11d476d4f7d185553f303e0cdca1b634
  $fShowPosn1 :: LexLambda.Posn -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)><L,U>,
     Unfolding: (\ (w :: LexLambda.Posn) (w1 :: GHC.Base.String) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 LexLambda.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
045ff2e64449a8aa489fbe3d737fd3f5
  $fShowPosn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pn "#) -}
11d476d4f7d185553f303e0cdca1b634
  $fShowPosn_$cshow :: LexLambda.Posn -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: LexLambda.Posn) ->
                 LexLambda.$fShowPosn_$cshowsPrec
                   LexLambda.$fShowBTree2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
11d476d4f7d185553f303e0cdca1b634
  $fShowPosn_$cshowList :: [LexLambda.Posn] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [LexLambda.Posn]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ LexLambda.Posn LexLambda.$fShowPosn1 ls s) -}
11d476d4f7d185553f303e0cdca1b634
  $fShowPosn_$cshowsPrec ::
    GHC.Types.Int -> LexLambda.Posn -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(SSS),1*U(U,U,U)><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: LexLambda.Posn)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { LexLambda.Pn ww3 ww4 ww5 ->
                 LexLambda.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fShowTok :: GHC.Show.Show LexLambda.Tok
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Tok
                  LexLambda.$fShowTok_$cshowsPrec
                  LexLambda.$fShowTok_$cshow
                  LexLambda.$fShowTok_$cshowList -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fShowTok1 :: LexLambda.Tok -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: LexLambda.Tok) (w1 :: GHC.Base.String) ->
                 LexLambda.$w$cshowsPrec1 0# w w1) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fShowTok_$cshow :: LexLambda.Tok -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: LexLambda.Tok) ->
                 LexLambda.$fShowTok_$cshowsPrec
                   LexLambda.$fShowBTree2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fShowTok_$cshowList :: [LexLambda.Tok] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [LexLambda.Tok]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ LexLambda.Tok LexLambda.$fShowTok1 ls s) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $fShowTok_$cshowsPrec ::
    GHC.Types.Int -> LexLambda.Tok -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: LexLambda.Tok)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 LexLambda.$w$cshowsPrec1 ww1 w1 w2 }) -}
9365c1aa5845747e7c235a441cc9081a
  $fShowToken :: GHC.Show.Show LexLambda.Token
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LexLambda.Token
                  LexLambda.$fShowToken_$cshowsPrec
                  LexLambda.$fShowToken_$cshow
                  LexLambda.$fShowToken_$cshowList -}
9365c1aa5845747e7c235a441cc9081a
  $fShowToken1 :: LexLambda.Token -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: LexLambda.Token) (w1 :: GHC.Base.String) ->
                 LexLambda.$w$cshowsPrec2 0# w w1) -}
35c519df5d578d0321b2c5c426e4cafa
  $fShowToken2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   LexLambda.$fShowToken3) -}
193935aab6b8d08bd745c27b101f5a69
  $fShowToken3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Err "#) -}
efde08e7cc5b258d831dcd399acdde7d
  $fShowToken4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PT "#) -}
9365c1aa5845747e7c235a441cc9081a
  $fShowToken_$cshow :: LexLambda.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: LexLambda.Token) ->
                 LexLambda.$fShowToken_$cshowsPrec
                   LexLambda.$fShowBTree2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9365c1aa5845747e7c235a441cc9081a
  $fShowToken_$cshowList :: [LexLambda.Token] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [LexLambda.Token]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ LexLambda.Token
                   LexLambda.$fShowToken1
                   ls
                   s) -}
9365c1aa5845747e7c235a441cc9081a
  $fShowToken_$cshowsPrec ::
    GHC.Types.Int -> LexLambda.Token -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: LexLambda.Token)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 LexLambda.$w$cshowsPrec2 ww1 w1 w2 }) -}
fdca5c05ea20fb412900f524c7a637ae
  $tc'AlexA# :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2793787892123287109##
                   17888247520609708071##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexA#2
                   0#
                   LexLambda.$tc'AlexA#1) -}
6a569b3eebd9c83ceb81f0707d89991a
  $tc'AlexA#1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a64b06fefb4598dad6d2070ddda01943
  $tc'AlexA#2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexA#3) -}
a164a6872c0214bf456e6e1067d9840c
  $tc'AlexA#3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexA#"#) -}
c9a8971eb14faf77b082471efb4cc6a6
  $tc'AlexAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4099843648440483926##
                   16634873237449219498##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexAcc2
                   1#
                   LexLambda.$tc'AlexAcc1) -}
801656b278596a40dfceff1ab7aec85c
  $tc'AlexAcc1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
32bc64d3a9e107c917b8c4114700630f
  $tc'AlexAcc2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexAcc3) -}
bff781fcbf17c0d7e483b16a1abb6534
  $tc'AlexAcc3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexAcc"#) -}
bd255218cb238af4bd43a95e76152ea5
  $tc'AlexAccNone :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15373905259702364108##
                   17853792932545843533##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexAccNone2
                   1#
                   LexLambda.$tc'AlexAccNone1) -}
58c1d7eba6e7906280bd7d08c28f5355
  $tc'AlexAccNone1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
a552f6518717165cd312e678876803d6
  $tc'AlexAccNone2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexAccNone3) -}
ba86b0a9a94c711b6a6ba9f41126a042
  $tc'AlexAccNone3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexAccNone"#) -}
121b6e7baacee687ba7cf29b99337e71
  $tc'AlexAccSkip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2478623011443272418##
                   14947664771478210788##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexAccSkip1
                   1#
                   LexLambda.$tc'AlexAccNone1) -}
0dc2e815f2db8d5fdca1171cdd5d7bd3
  $tc'AlexAccSkip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexAccSkip2) -}
7a86749668e907cd1a28b3971603975a
  $tc'AlexAccSkip2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexAccSkip"#) -}
4761b16c0e0178093642dc179c2f9d49
  $tc'AlexEOF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5105095030028835326##
                   2025476779549458577##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexEOF2
                   1#
                   LexLambda.$tc'AlexEOF1) -}
c028da5ef794ec47e27ad06c0556e3ec
  $tc'AlexEOF1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
858579de9cefce6a6ea9796511cb665f
  $tc'AlexEOF2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexEOF3) -}
4696f2e77fcaac7921e440ce6587972d
  $tc'AlexEOF3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexEOF"#) -}
f911cb345224773f1cd30aa2887006be
  $tc'AlexError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3933230989789511063##
                   6457148908505443160##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexError2
                   1#
                   LexLambda.$tc'AlexError1) -}
6150cf63950eba50d54c3b4c453464ee
  $tc'AlexError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b92cb5d79698eb535b7668b23ed53d9d
  $tc'AlexError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexError3) -}
3a940bc8af38b46428fbadd53871e3e8
  $tc'AlexError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexError"#) -}
139a0deec49c960693968282de4f5e3a
  $tc'AlexLastAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6789139724300613666##
                   8801404504486849405##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexLastAcc2
                   0#
                   LexLambda.$tc'AlexLastAcc1) -}
4f2d0a8f6bbca85840627c6ee93a2459
  $tc'AlexLastAcc1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bded4f6ed7636e8089ea6ebbfb3b593f
  $tc'AlexLastAcc2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexLastAcc3) -}
2dc55a2a2c5dd155868b8f7fdcd4ca69
  $tc'AlexLastAcc3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexLastAcc"#) -}
8256b3e536b36def40bd3a3ad77b687f
  $tc'AlexLastSkip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14575810966376699314##
                   6799538250376893333##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexLastSkip2
                   0#
                   LexLambda.$tc'AlexLastSkip1) -}
9065d1bdf2f9b43ab335fc898e28464f
  $tc'AlexLastSkip1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b945d9f76b5f43933cf093eb782ba7b1
  $tc'AlexLastSkip2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexLastSkip3) -}
530848268ab8a2ed28b257fb469b3486
  $tc'AlexLastSkip3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexLastSkip"#) -}
c05b4a890097f23c028569e5c356e227
  $tc'AlexNone :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3798972891882104344##
                   14554102997451838249##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexNone2
                   0#
                   LexLambda.$tc'AlexNone1) -}
2b214572ce690d3b6891399b593f0b31
  $tc'AlexNone1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
cd8340666e6ae14e77f4ddda9af78b96
  $tc'AlexNone2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexNone3) -}
5be42fbf383cb22969788a8eb9ab6bdc
  $tc'AlexNone3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexNone"#) -}
16073b4c38921f68462636e0deb72a2c
  $tc'AlexSkip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9044945561026741849##
                   15352229416458887345##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexSkip2
                   1#
                   LexLambda.$tc'AlexSkip1) -}
7d796e145e697d5ce984f9697e92d272
  $tc'AlexSkip1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d0436f60661674bbc19591cf3e558621
  $tc'AlexSkip2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexSkip3) -}
c22ab94097a74d87fa530d3acfe379c4
  $tc'AlexSkip3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexSkip"#) -}
0bea2716df55c2f30664f864889b8494
  $tc'AlexToken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   724722229931953839##
                   3466311318616612329##
                   LexLambda.$trModule
                   LexLambda.$tc'AlexToken2
                   1#
                   LexLambda.$tc'AlexToken1) -}
220e5083115f9d80ca72f0934f811c4c
  $tc'AlexToken1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
29b04f354668791ed6a42d3359c6887e
  $tc'AlexToken2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'AlexToken3) -}
dc68917217772a8f7dcdbd0e6e0c0c6b
  $tc'AlexToken3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AlexToken"#) -}
6c547e81c77a7927dd296615c056771a
  $tc'B :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8148945574849711820##
                   2498260159671994263##
                   LexLambda.$trModule
                   LexLambda.$tc'B2
                   0#
                   LexLambda.$tc'B1) -}
2f9021c836d9375a85ba5910f247cc63
  $tc'B1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
20be114a2564393d29cbcbcc6ee4963b
  $tc'B2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'B3) -}
fef98270c6769da9ff51e80dd4f6fcd4
  $tc'B3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'B"#) -}
6be3de537bad9f37a12b587d1a1a99df
  $tc'Err :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1677392855193097232##
                   18072732112874099517##
                   LexLambda.$trModule
                   LexLambda.$tc'Err2
                   0#
                   LexLambda.$tc'Err1) -}
f2c3e69ec1c7ff65360eb9fde59afe25
  $tc'Err1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
83afb629067608c38846021ceff1b961
  $tc'Err2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'Err3) -}
2ec2db57efb8eb82d016aa0d3331cddd
  $tc'Err3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Err"#) -}
e3ceaf5cde9f43554e65278b3c2e231d
  $tc'N :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1698359622129010327##
                   7664948685892820504##
                   LexLambda.$trModule
                   LexLambda.$tc'N2
                   0#
                   LexLambda.$tc'N1) -}
90e22b247b7f56b1926276364a7a1683
  $tc'N1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
1a8c354b3e043a6abd84dbed88369b74
  $tc'N2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'N3) -}
68f963995c4e8fbbfcff03ec1f59d1f1
  $tc'N3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'N"#) -}
7efe077d6f2d340e28536ace52f2029d
  $tc'PT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11428883264511981481##
                   11250659935283261324##
                   LexLambda.$trModule
                   LexLambda.$tc'PT2
                   0#
                   LexLambda.$tc'PT1) -}
0effe5346e5ff2032e546625f9efcfbd
  $tc'PT1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f03a92290eb0e2104ef430cfa47f24e1
  $tc'PT2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'PT3) -}
fdda9fed9bb11f99944f140d573a27e4
  $tc'PT3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PT"#) -}
c1423e37f34269caef907e8cbd84f58b
  $tc'Pn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3407058054931602752##
                   3179395343105281589##
                   LexLambda.$trModule
                   LexLambda.$tc'Pn2
                   0#
                   LexLambda.$tc'Pn1) -}
b35381fa6c65033c303425d1b139bc6f
  $tc'Pn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2337ef375f90f309695d59848cccf64d
  $tc'Pn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'Pn3) -}
85b03d4a4a2598e3e877ff086861f8fa
  $tc'Pn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pn"#) -}
f654dd08f98290cbd6755bb102c8c033
  $tc'TC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14684960776661798015##
                   5635419934688444631##
                   LexLambda.$trModule
                   LexLambda.$tc'TC2
                   0#
                   LexLambda.$tc'TC1) -}
79c8aa6d7ae1e5e3bcc56092f8ee8182
  $tc'TC1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3a33b76c5c20be2404081402abaa267c
  $tc'TC2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'TC3) -}
eae09438345736b9bfdab061696c6459
  $tc'TC3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TC"#) -}
ecf68180ef24b0269695c428b616b101
  $tc'TD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13834397079283174368##
                   6015494372518522655##
                   LexLambda.$trModule
                   LexLambda.$tc'TD1
                   0#
                   LexLambda.$tc'TC1) -}
f862027e972cc8e2713b0b2abbde381d
  $tc'TD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'TD2) -}
0acd72aa9760cb090c2c530dab727184
  $tc'TD2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TD"#) -}
df67578de65c5959430fee62d447bcd6
  $tc'TI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4226729270177586287##
                   15167438811415124356##
                   LexLambda.$trModule
                   LexLambda.$tc'TI1
                   0#
                   LexLambda.$tc'TC1) -}
7e24363e9b81744628cd202252e867b5
  $tc'TI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'TI2) -}
ea61f0e66d4ff4889f8285b6b21092e1
  $tc'TI2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TI"#) -}
ee4b8e61b60ca058ebc583f29b507842
  $tc'TL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3373032923942151967##
                   8926673541948936265##
                   LexLambda.$trModule
                   LexLambda.$tc'TL1
                   0#
                   LexLambda.$tc'TC1) -}
0a7d4bbadce87f11b07998e05f2956f4
  $tc'TL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'TL2) -}
be5cc1ce660c22dad34023753ced263a
  $tc'TL2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TL"#) -}
78490be12b8894ec0201293098f13506
  $tc'TS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13074907386638523516##
                   2473506837675621761##
                   LexLambda.$trModule
                   LexLambda.$tc'TS2
                   0#
                   LexLambda.$tc'TS1) -}
12da8d73e2e215034f59ff90268f4e48
  $tc'TS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ea6b2431d49b8365ae35a83ab5e28478
  $tc'TS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'TS3) -}
069771670cfcdc30cd2f1965959eaa2e
  $tc'TS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TS"#) -}
979473f25b82180565417e372713003c
  $tc'TV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17950661764316757484##
                   7853096236264592774##
                   LexLambda.$trModule
                   LexLambda.$tc'TV1
                   0#
                   LexLambda.$tc'TC1) -}
ed9921c839dbdfe4473605bd2127f1d6
  $tc'TV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'TV2) -}
97978d3c296fb9c583ec6223a9243a9d
  $tc'TV2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TV"#) -}
96cb24efe97164eb2a0150fb3a92dcdc
  $tc'T_Id :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9516482462558825115##
                   16777082680289517509##
                   LexLambda.$trModule
                   LexLambda.$tc'T_Id1
                   0#
                   LexLambda.$tc'TC1) -}
9f01c6bfa38da5a98d594c03044f191d
  $tc'T_Id1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tc'T_Id2) -}
55cccafd0170782035a745534420df3b
  $tc'T_Id2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'T_Id"#) -}
912b3e6b57cbe52757323f58288e427a
  $tcAlexAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4161876595686962213##
                   12266242177180053874##
                   LexLambda.$trModule
                   LexLambda.$tcAlexAcc1
                   0#
                   GHC.Types.krep$*Arr*) -}
e7ee567dea2c154fe5db52a5b50b39a5
  $tcAlexAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcAlexAcc2) -}
014cf455f1cb739e6e2eb47821a21bbb
  $tcAlexAcc2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AlexAcc"#) -}
01fe62dd64f62b15ad1dc346d5dccc58
  $tcAlexAddr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3832292788837349934##
                   6643740667963420382##
                   LexLambda.$trModule
                   LexLambda.$tcAlexAddr1
                   0#
                   GHC.Types.krep$*) -}
2475a9fc36d24d22f7bc3ed1636fd9e8
  $tcAlexAddr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcAlexAddr2) -}
40171038909a7eae0119ab2f21805f75
  $tcAlexAddr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AlexAddr"#) -}
a93ee7a0ffcd8f0d8fdb6f1b8c106f54
  $tcAlexLastAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8573964183248578188##
                   17825188957166163936##
                   LexLambda.$trModule
                   LexLambda.$tcAlexLastAcc1
                   0#
                   GHC.Types.krep$*) -}
fff3c3bff5a4b610c3538731754c5ced
  $tcAlexLastAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcAlexLastAcc2) -}
10a3594960a2f41100a02129fb9411f8
  $tcAlexLastAcc2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AlexLastAcc"#) -}
67afd5853126e1ebaff435716b69b7e2
  $tcAlexReturn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1690462328384723510##
                   1423056896240979313##
                   LexLambda.$trModule
                   LexLambda.$tcAlexReturn1
                   0#
                   GHC.Types.krep$*Arr*) -}
267200107f62d72345fea4f38ae4fde6
  $tcAlexReturn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcAlexReturn2) -}
c79eb3640e77a3c629a492aa2ea6c9e8
  $tcAlexReturn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AlexReturn"#) -}
a839045d141ede0e69dab810576eaf43
  $tcBTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3158603092769578221##
                   13102554457089534992##
                   LexLambda.$trModule
                   LexLambda.$tcBTree1
                   0#
                   GHC.Types.krep$*) -}
ea5d6d9ab3841501bdfd2fe311833c4f
  $tcBTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcBTree2) -}
33a03ac86dc4f2db293150ff3cc3dd75
  $tcBTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BTree"#) -}
435c80119fc70534c32e1c7cea5866be
  $tcPosn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6471678903464588017##
                   3567223614049869815##
                   LexLambda.$trModule
                   LexLambda.$tcPosn1
                   0#
                   GHC.Types.krep$*) -}
c594d8f0c3f49425aa3e4eff95530b54
  $tcPosn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcPosn2) -}
a3e71b51ab6077104433c0cee32d2907
  $tcPosn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Posn"#) -}
51530730a30e925328f6c7e1b1daac1f
  $tcTok :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1130675790485463935##
                   18409213519963711168##
                   LexLambda.$trModule
                   LexLambda.$tcTok1
                   0#
                   GHC.Types.krep$*) -}
c26a0ae22bedcdf999adffac915134ac
  $tcTok1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcTok2) -}
75ccda2e0cb488a0709a554661b24cbb
  $tcTok2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tok"#) -}
ae241ac15439f532089d83576f932a36
  $tcToken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17276130358647351016##
                   7191231238592748329##
                   LexLambda.$trModule
                   LexLambda.$tcToken1
                   0#
                   GHC.Types.krep$*) -}
9f1ab64fd5c238487926458f54a03344
  $tcToken1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$tcToken2) -}
fb383cd3ae59855c30ceedeebca8f87b
  $tcToken2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Token"#) -}
b9b9a3fd4580b988e0da4de86979327d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   LexLambda.$trModule3
                   LexLambda.$trModule1) -}
432b3853049a8d5677cbf31fea6c9fd8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$trModule2) -}
1392a6cc780c9f0becf603f8930b2105
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LexLambda"#) -}
2b30613c3c9175efd8f9f9d9d549ec9e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LexLambda.$trModule4) -}
d2cb6a9e4f4dd546082a1862447a9e10
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Lambda-0.1.0.0-EqpDae84VpUAAE1gCYSPw8"#) -}
627f9eebdf86f9381298c85548196ebe
  $w$c< ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><S,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case GHC.Prim.<# ww ww3 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww ww3 of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case GHC.Prim.<# ww1 ww4 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# ww1 ww4 of lwild3 {
                                  DEFAULT -> GHC.Types.False
                                  1# -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# ww2 ww5) }
                             1# -> GHC.Types.True } }
                   1# -> GHC.Types.True }) -}
b461669a3f4aec8f3758fdf2f5572f81
  $w$c<= ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><S,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case GHC.Prim.<# ww3 ww of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww3 ww of lwild1 {
                        DEFAULT -> GHC.Types.True
                        1#
                        -> case GHC.Prim.<# ww4 ww1 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# ww4 ww1 of lwild3 {
                                  DEFAULT -> GHC.Types.True
                                  1#
                                  -> case GHC.Prim.<# ww5 ww2 of lwild4 {
                                       DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                             1# -> GHC.Types.False } }
                   1# -> GHC.Types.False }) -}
ad6eed06d7229a504487e13f451edbc8
  $w$c>= ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><S,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case GHC.Prim.<# ww ww3 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww ww3 of lwild1 {
                        DEFAULT -> GHC.Types.True
                        1#
                        -> case GHC.Prim.<# ww1 ww4 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# ww1 ww4 of lwild3 {
                                  DEFAULT -> GHC.Types.True
                                  1#
                                  -> case GHC.Prim.<# ww2 ww5 of lwild4 {
                                       DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                             1# -> GHC.Types.False } }
                   1# -> GHC.Types.False }) -}
7f0b58b17a62eb581d56293bb98be5cc
  $w$ccompare ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Ordering
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><S,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case GHC.Prim.<# ww ww3 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww ww3 of lwild1 {
                        DEFAULT -> GHC.Types.GT
                        1#
                        -> case GHC.Prim.<# ww1 ww4 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# ww1 ww4 of lwild3 {
                                  DEFAULT -> GHC.Types.GT 1# -> GHC.Classes.compareInt# ww2 ww5 }
                             1# -> GHC.Types.LT } }
                   1# -> GHC.Types.LT }) -}
20cc84798084f18a73da27568902df85
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><L,U><L,U><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       LexLambda.$fShowPosn2
                       (case GHC.Show.$wshowSignedInt
                               11#
                               ww1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case GHC.Show.$wshowSignedInt
                                          11#
                                          ww2
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (case GHC.Show.$wshowSignedInt
                                                     11#
                                                     ww3
                                                     x of ww4 { (#,#) ww5 ww6 ->
                                              GHC.Types.:
                                                @ GHC.Types.Char
                                                ww5
                                                ww6 })) of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww5
                                     ww6 })) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
914e21ad50a7beaac3a1d55f2b9467ca
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> LexLambda.Tok -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
9365c1aa5845747e7c235a441cc9081a
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> LexLambda.Token -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: LexLambda.Token)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   LexLambda.PT b1 b2
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             LexLambda.$fShowToken4
                             (case b1 of ww1 { LexLambda.Pn ww2 ww3 ww4 ->
                              LexLambda.$w$cshowsPrec
                                11#
                                ww2
                                ww3
                                ww4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (LexLambda.$w$cshowsPrec1 11# b2 w1)) })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                LexLambda.$fShowToken4
                                (case b1 of ww1 { LexLambda.Pn ww2 ww3 ww4 ->
                                 LexLambda.$w$cshowsPrec
                                   11#
                                   ww2
                                   ww3
                                   ww4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (LexLambda.$w$cshowsPrec1
                                         11#
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1))) })) }
                   LexLambda.Err b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             LexLambda.$fShowToken2
                             (case b1 of ww1 { LexLambda.Pn ww2 ww3 ww4 ->
                              LexLambda.$w$cshowsPrec 11# ww2 ww3 ww4 w1 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                LexLambda.$fShowToken2
                                (case b1 of ww1 { LexLambda.Pn ww2 ww3 ww4 ->
                                 LexLambda.$w$cshowsPrec
                                   11#
                                   ww2
                                   ww3
                                   ww4
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1) })) } }) -}
35770c4ed226629b07e1eab2aa1d63e2
  $walexGetByte ::
    LexLambda.Posn
    -> GHC.Types.Char
    -> [LexLambda.Byte]
    -> GHC.Base.String
    -> GHC.Maybe.Maybe (LexLambda.Byte, LexLambda.AlexInput)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U,U,U)><L,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: LexLambda.Posn)
                   (ww1 :: GHC.Types.Char)
                   (ww2 :: [LexLambda.Byte])
                   (ww3 :: GHC.Base.String) ->
                 case ww2 of wild {
                   []
                   -> case ww3 of wild1 {
                        [] -> GHC.Maybe.Nothing @ (LexLambda.Byte, LexLambda.AlexInput)
                        : c s
                        -> case ww of wild2 { LexLambda.Pn dt dt1 dt2 ->
                           case c of wild3 { GHC.Types.C# ds ->
                           let {
                             x :: GHC.Prim.Int# = GHC.Prim.ord# ds
                           } in
                           let {
                             ds1 :: (GHC.Word.Word8, [GHC.Word.Word8])
                             = case GHC.Prim.<=# x 127# of lwild {
                                 DEFAULT
                                 -> case GHC.Prim.<=# x 2047# of lwild1 {
                                      DEFAULT
                                      -> case GHC.Prim.<=# x 65535# of lwild2 {
                                           DEFAULT
                                           -> (GHC.Word.W8#
                                                 (GHC.Prim.narrow8Word#
                                                    (GHC.Prim.int2Word#
                                                       (GHC.Prim.+#
                                                          240#
                                                          (GHC.Prim.uncheckedIShiftRA# x 18#)))),
                                               GHC.Types.:
                                                 @ GHC.Word.Word8
                                                 (GHC.Word.W8#
                                                    (GHC.Prim.narrow8Word#
                                                       (GHC.Prim.int2Word#
                                                          (GHC.Prim.+#
                                                             128#
                                                             (GHC.Prim.andI#
                                                                (GHC.Prim.uncheckedIShiftRA# x 12#)
                                                                63#)))))
                                                 (GHC.Types.:
                                                    @ GHC.Word.Word8
                                                    (GHC.Word.W8#
                                                       (GHC.Prim.narrow8Word#
                                                          (GHC.Prim.int2Word#
                                                             (GHC.Prim.+#
                                                                128#
                                                                (GHC.Prim.andI#
                                                                   (GHC.Prim.uncheckedIShiftRA#
                                                                      x
                                                                      6#)
                                                                   63#)))))
                                                    (GHC.Types.:
                                                       @ GHC.Word.Word8
                                                       (GHC.Word.W8#
                                                          (GHC.Prim.narrow8Word#
                                                             (GHC.Prim.int2Word#
                                                                (GHC.Prim.+#
                                                                   128#
                                                                   (GHC.Prim.andI# x 63#)))))
                                                       (GHC.Types.[] @ GHC.Word.Word8))))
                                           1#
                                           -> (GHC.Word.W8#
                                                 (GHC.Prim.narrow8Word#
                                                    (GHC.Prim.int2Word#
                                                       (GHC.Prim.+#
                                                          224#
                                                          (GHC.Prim.uncheckedIShiftRA# x 12#)))),
                                               GHC.Types.:
                                                 @ GHC.Word.Word8
                                                 (GHC.Word.W8#
                                                    (GHC.Prim.narrow8Word#
                                                       (GHC.Prim.int2Word#
                                                          (GHC.Prim.+#
                                                             128#
                                                             (GHC.Prim.andI#
                                                                (GHC.Prim.uncheckedIShiftRA# x 6#)
                                                                63#)))))
                                                 (GHC.Types.:
                                                    @ GHC.Word.Word8
                                                    (GHC.Word.W8#
                                                       (GHC.Prim.narrow8Word#
                                                          (GHC.Prim.int2Word#
                                                             (GHC.Prim.+#
                                                                128#
                                                                (GHC.Prim.andI# x 63#)))))
                                                    (GHC.Types.[] @ GHC.Word.Word8))) }
                                      1#
                                      -> (GHC.Word.W8#
                                            (GHC.Prim.narrow8Word#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.+#
                                                     192#
                                                     (GHC.Prim.uncheckedIShiftRA# x 6#)))),
                                          GHC.Types.:
                                            @ GHC.Word.Word8
                                            (GHC.Word.W8#
                                               (GHC.Prim.narrow8Word#
                                                  (GHC.Prim.int2Word#
                                                     (GHC.Prim.+# 128# (GHC.Prim.andI# x 63#)))))
                                            (GHC.Types.[] @ GHC.Word.Word8)) }
                                 1#
                                 -> (GHC.Word.W8# (GHC.Prim.narrow8Word# (GHC.Prim.int2Word# x)),
                                     GHC.Types.[] @ GHC.Word.Word8) }
                           } in
                           case ds of ds2 {
                             DEFAULT
                             -> GHC.Maybe.Just
                                  @ (GHC.Word.Word8,
                                     (LexLambda.Posn, GHC.Types.Char, [GHC.Word.Word8],
                                      [GHC.Types.Char]))
                                  (case ds1 of ds3 { (,) b bs -> b },
                                   (LexLambda.Pn (GHC.Prim.+# dt 1#) dt1 (GHC.Prim.+# dt2 1#),
                                    wild3, case ds1 of ds3 { (,) b bs -> bs }, s))
                             '\t'#
                             -> GHC.Maybe.Just
                                  @ (GHC.Word.Word8,
                                     (LexLambda.Posn, GHC.Types.Char, [GHC.Word.Word8],
                                      [GHC.Types.Char]))
                                  (case ds1 of ds3 { (,) b bs -> b },
                                   (LexLambda.Pn
                                      (GHC.Prim.+# dt 1#)
                                      dt1
                                      (GHC.Prim.+#
                                         (GHC.Prim.*#
                                            (GHC.Prim.uncheckedIShiftRA# (GHC.Prim.+# dt2 7#) 3#)
                                            8#)
                                         1#),
                                    wild3, case ds1 of ds3 { (,) b bs -> bs }, s))
                             '\n'#
                             -> GHC.Maybe.Just
                                  @ (GHC.Word.Word8,
                                     (LexLambda.Posn, GHC.Types.Char, [GHC.Word.Word8],
                                      [GHC.Types.Char]))
                                  (case ds1 of ds3 { (,) b bs -> b },
                                   (LexLambda.Pn (GHC.Prim.+# dt 1#) (GHC.Prim.+# dt1 1#) 1#, wild3,
                                    case ds1 of ds3 { (,) b bs -> bs }, s)) } } } }
                   : b bs
                   -> GHC.Maybe.Just
                        @ (LexLambda.Byte,
                           (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
                            GHC.Base.String))
                        (b, (ww, ww1, bs, ww3)) }) -}
aee5e4e0de3dba3fb3586c52e87a79a1
  $walexScanUser ::
    LexLambda.Posn
    -> GHC.Types.Char
    -> [LexLambda.Byte]
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> LexLambda.AlexReturn
         (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
  {- Arity: 5, Strictness: <L,U(U,U,U)><L,U><S,U><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ @ t
                   (ww :: LexLambda.Posn)
                   (ww1 :: GHC.Types.Char)
                   (ww2 :: [LexLambda.Byte])
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Prim.Int#) ->
                 case LexLambda.$walex_scan_tkn
                        @ t
                        @ (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
                           GHC.Base.String)
                        0#
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        LexLambda.AlexNone of ww5 { (#,#) ww6 ww7 ->
                 case ww6 of wild {
                   LexLambda.AlexNone
                   -> case LexLambda.$walexGetByte ww ww1 ww2 ww3 of wild1 {
                        GHC.Maybe.Nothing
                        -> LexLambda.AlexEOF
                             @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        GHC.Maybe.Just ds
                        -> LexLambda.$WAlexError
                             @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                             ww7 }
                   LexLambda.AlexLastAcc dt input__''' dt1
                   -> LexLambda.AlexToken
                        @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        input__'''
                        dt1
                        (case LexLambda.alex_actions of wild1 { GHC.Arr.Array l u dt2 ds ->
                         case l of wild2 { GHC.Types.I# m ->
                         case u of wild3 { GHC.Types.I# n ->
                         case GHC.Prim.<=# m dt of lwild {
                           DEFAULT
                           -> case LexLambda.alexScanUser1 dt wild2 wild3
                              ret_ty (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                              of {}
                           1#
                           -> case GHC.Prim.<=# dt n of lwild1 {
                                DEFAULT
                                -> case LexLambda.alexScanUser1 dt wild2 wild3
                                   ret_ty (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                                   of {}
                                1#
                                -> case GHC.Prim.indexArray#
                                          @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                                          ds
                                          (GHC.Prim.-# dt m) of ds1 { Unit# ipv ->
                                   ipv } } } } } })
                   LexLambda.AlexLastSkip input__'' dt
                   -> LexLambda.AlexSkip
                        @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        input__''
                        dt } }) -}
98ed5f99190d4757ba8c9dcf1a92138c
  $walex_scan_tkn ::
    GHC.Prim.Int#
    -> LexLambda.Posn
    -> GHC.Types.Char
    -> [LexLambda.Byte]
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> LexLambda.AlexLastAcc
    -> (# LexLambda.AlexLastAcc,
          (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
           GHC.Base.String) #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U,U)><L,U><S,U><L,U><S,U><L,1*U>,
     Inline: [2] -}
7bcd033f5e0cee195d7a9efb94cf5c00
  $wgo ::
    LexLambda.Posn
    -> GHC.Types.Char
    -> [LexLambda.Byte]
    -> GHC.Base.String
    -> [LexLambda.Token]
  {- Arity: 4, Strictness: <L,U(U,U,U)><L,U><S,U><L,U>,
     Inline: [2] -}
fd61ee6e8b6655398aaf6767514a173b
  $wmkPosToken ::
    LexLambda.Token
    -> (# (GHC.Types.Int, GHC.Types.Int), GHC.Base.String #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: LexLambda.Token) ->
                 case w of wild {
                   LexLambda.PT p ds
                   -> (# LexLambda.posLineCol p,
                         case ds of wild1 {
                           LexLambda.TS s dt -> s
                           LexLambda.TL s
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString s GHC.Show.$fShow[]1)
                           LexLambda.TI s -> s
                           LexLambda.TV s -> s
                           LexLambda.TD s -> s
                           LexLambda.TC s -> s
                           LexLambda.T_Id s -> s } #)
                   LexLambda.Err ipv
                   -> case LexLambda.mkPosToken1
                      ret_ty (# (GHC.Types.Int, GHC.Types.Int), GHC.Base.String #)
                      of {} }) -}
88470f3ba44cf1d8f12a7e87f750ed8c
  $wprintPosn :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 GHC.CString.unpackAppendCString#
                   LexLambda.printPosn2
                   (case GHC.Show.$wshowSignedInt
                           0#
                           ww
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         LexLambda.printPosn1
                         (case GHC.Show.$wshowSignedInt
                                 0#
                                 ww1
                                 (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww7 ->
                          GHC.Types.: @ GHC.Types.Char ww3 ww7 }))
                      ww5
                      ww6 })) -}
e857345461b516431e940cd811fa2ff3
  type role AlexAcc phantom
  data AlexAcc user
    = AlexAccNone | AlexAcc GHC.Types.Int | AlexAccSkip
a0743f66f4315f25124e4affbb416184
  data AlexAddr = AlexA# GHC.Prim.Addr#
ef9f6aae27b92d52cac65ff11d66a669
  type AlexInput =
    (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte], GHC.Base.String)
a6eb4c1f4536a694c8e7c5a747aacaf8
  data AlexLastAcc
    = AlexNone
    | AlexLastAcc {-# UNPACK #-}GHC.Types.Int
                  !LexLambda.AlexInput
                  {-# UNPACK #-}GHC.Types.Int
    | AlexLastSkip !LexLambda.AlexInput {-# UNPACK #-}GHC.Types.Int
8cd750d6f832e16fcdd619b9f5a52ffa
  data AlexReturn a
    = AlexEOF
    | AlexError !LexLambda.AlexInput
    | AlexSkip !LexLambda.AlexInput {-# UNPACK #-}GHC.Types.Int
    | AlexToken !LexLambda.AlexInput {-# UNPACK #-}GHC.Types.Int a
8567983dab9b2f86fd2116f426c7deee
  data BTree
    = N
    | B GHC.Base.String LexLambda.Tok LexLambda.BTree LexLambda.BTree
54c9f7bb64a1aa754d9e1b97d976b330
  type Byte = GHC.Word.Word8
11d476d4f7d185553f303e0cdca1b634
  data Posn
    = Pn {-# UNPACK #-}GHC.Types.Int
         {-# UNPACK #-}GHC.Types.Int
         {-# UNPACK #-}GHC.Types.Int
914e21ad50a7beaac3a1d55f2b9467ca
  data Tok
    = TS !GHC.Base.String {-# UNPACK #-}GHC.Types.Int
    | TL !GHC.Base.String
    | TI !GHC.Base.String
    | TV !GHC.Base.String
    | TD !GHC.Base.String
    | TC !GHC.Base.String
    | T_Id !GHC.Base.String
9365c1aa5845747e7c235a441cc9081a
  data Token = PT LexLambda.Posn LexLambda.Tok | Err LexLambda.Posn
37e1b38be3350fbb41e7d2ba4f072f53
  alexGetByte ::
    LexLambda.AlexInput
    -> GHC.Maybe.Maybe (LexLambda.Byte, LexLambda.AlexInput)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(U(U,U,U),U,1*U,U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: LexLambda.AlexInput) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 LexLambda.$walexGetByte ww1 ww2 ww3 ww4 }) -}
4b4bad435f94a9f00751b37d6aab3550
  alexIndexInt16OffAddr ::
    LexLambda.AlexAddr -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: LexLambda.AlexAddr) (off :: GHC.Prim.Int#) ->
                 case ds of wild { LexLambda.AlexA# arr ->
                 GHC.Prim.indexInt16OffAddr# arr off }) -}
361aa246ef6d933edce677a498fbcd4f
  alexIndexInt32OffAddr ::
    LexLambda.AlexAddr -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: LexLambda.AlexAddr) (off :: GHC.Prim.Int#) ->
                 case ds of wild { LexLambda.AlexA# arr ->
                 GHC.Prim.indexInt32OffAddr# arr off }) -}
d93da8e3a53ed0aec6793416766e630a
  alexInputPrevChar :: LexLambda.AlexInput -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
                           GHC.Base.String)) ->
                 case ds of wild { (,,,) p c bs s -> c }) -}
ac53d5ad0fafb8d2367706a8e39450b9
  alexMove :: LexLambda.Posn -> GHC.Types.Char -> LexLambda.Posn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSL),1*U(U,U,U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: LexLambda.Posn) (ds1 :: GHC.Types.Char) ->
                 case ds of wild { LexLambda.Pn dt dt1 dt2 ->
                 case ds1 of wild1 { GHC.Types.C# ds2 ->
                 case ds2 of ds3 {
                   DEFAULT
                   -> LexLambda.Pn (GHC.Prim.+# dt 1#) dt1 (GHC.Prim.+# dt2 1#)
                   '\t'#
                   -> LexLambda.Pn
                        (GHC.Prim.+# dt 1#)
                        dt1
                        (GHC.Prim.+#
                           (GHC.Prim.*#
                              (GHC.Prim.uncheckedIShiftRA# (GHC.Prim.+# dt2 7#) 3#)
                              8#)
                           1#)
                   '\n'#
                   -> LexLambda.Pn
                        (GHC.Prim.+# dt 1#)
                        (GHC.Prim.+# dt1 1#)
                        1# } } }) -}
8a922435c550d29bdbd050997f911b1d
  alexScan ::
    (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte], GHC.Base.String)
    -> GHC.Types.Int
    -> LexLambda.AlexReturn
         (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
  {- Arity: 2,
     Strictness: <S(LLSL),1*U(U(U,U,U),U,U,U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (input__ :: (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
                                GHC.Base.String))
                   (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# sc ->
                 LexLambda.alexScanUser
                   @ GHC.Types.Any
                   LexLambda.alexScan1
                   input__
                   (GHC.Types.I# sc) }) -}
df2bd24ff5a31b260b4a797f20ab6cf2
  alexScan1 :: GHC.Types.Any
  {- Strictness: x -}
04628fe9c1f34d51be550959b212bc51
  alexScanUser ::
    t
    -> (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
        GHC.Base.String)
    -> GHC.Types.Int
    -> LexLambda.AlexReturn
         (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
  {- Arity: 3,
     Strictness: <L,A><S(LLSL),1*U(U(U,U,U),U,U,U)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   (w :: t)
                   (w1 :: (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
                           GHC.Base.String))
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case w2 of ww5 { GHC.Types.I# ww6 ->
                 LexLambda.$walexScanUser @ t ww1 ww2 ww3 ww4 ww6 } }) -}
69f2506cc61e2089a20938409ead3cf4
  alexScanUser1 ::
    GHC.Prim.Int# -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
9d758997db269b92ba20ed2f4faaf2d1
  alexStartPos :: LexLambda.Posn
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (LexLambda.Pn 0# 1# 1#) -}
5ee8c2a47a75e61ad99e284ce0acbcf1
  alex_accept :: GHC.Arr.Array GHC.Types.Int (LexLambda.AlexAcc user)
  {- Unfolding: (\ @ user ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             GHC.Arr.Array GHC.Types.Int (LexLambda.AlexAcc user) #)
                        (LexLambda.alex_accept1 @ user) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
350a0fa4d8ca8df039145a64ecd7fb9f
  alex_accept1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Arr.Array GHC.Types.Int (LexLambda.AlexAcc user) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ @ user
                   (s1# :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ (LexLambda.AlexAcc user)
                        @ GHC.Prim.RealWorld
                        30#
                        (GHC.Arr.arrEleBottom @ (LexLambda.AlexAcc user))
                        s1# of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        0#
                        (LexLambda.AlexAccNone @ user)
                        ipv of s4# { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        1#
                        (LexLambda.AlexAccNone @ user)
                        s4# of s4#1 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        2#
                        (LexLambda.AlexAccNone @ user)
                        s4#1 of s4#2 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        3#
                        (LexLambda.AlexAccNone @ user)
                        s4#2 of s4#3 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        4#
                        (LexLambda.AlexAccNone @ user)
                        s4#3 of s4#4 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        5#
                        (LexLambda.AlexAccNone @ user)
                        s4#4 of s4#5 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        6#
                        (LexLambda.AlexAccNone @ user)
                        s4#5 of s4#6 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        7#
                        (LexLambda.AlexAccNone @ user)
                        s4#6 of s4#7 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        8#
                        (LexLambda.AlexAccNone @ user)
                        s4#7 of s4#8 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        9#
                        (LexLambda.AlexAccNone @ user)
                        s4#8 of s4#9 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        10#
                        (LexLambda.AlexAccNone @ user)
                        s4#9 of s4#10 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        11#
                        (LexLambda.AlexAccNone @ user)
                        s4#10 of s4#11 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        12#
                        (LexLambda.AlexAccNone @ user)
                        s4#11 of s4#12 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        13#
                        (LexLambda.AlexAccNone @ user)
                        s4#12 of s4#13 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        14#
                        (LexLambda.AlexAccNone @ user)
                        s4#13 of s4#14 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        15#
                        (LexLambda.AlexAccNone @ user)
                        s4#14 of s4#15 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        16#
                        (LexLambda.AlexAccNone @ user)
                        s4#15 of s4#16 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        17#
                        (LexLambda.AlexAccNone @ user)
                        s4#16 of s4#17 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        18#
                        (LexLambda.AlexAccNone @ user)
                        s4#17 of s4#18 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        19#
                        (LexLambda.AlexAccNone @ user)
                        s4#18 of s4#19 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        20#
                        (LexLambda.AlexAccNone @ user)
                        s4#19 of s4#20 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        21#
                        (LexLambda.AlexAccNone @ user)
                        s4#20 of s4#21 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        22#
                        (LexLambda.AlexAccNone @ user)
                        s4#21 of s4#22 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        23#
                        (LexLambda.AlexAccNone @ user)
                        s4#22 of s4#23 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        24#
                        (LexLambda.AlexAccSkip @ user)
                        s4#23 of s4#24 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        25#
                        (LexLambda.AlexAccSkip @ user)
                        s4#24 of s4#25 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        26#
                        (LexLambda.AlexAccSkip @ user)
                        s4#25 of s4#26 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        27#
                        (LexLambda.alex_accept6 @ user)
                        s4#26 of s4#27 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        28#
                        (LexLambda.alex_accept4 @ user)
                        s4#27 of s4#28 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        29#
                        (LexLambda.alex_accept3 @ user)
                        s4#28 of wild4 { DEFAULT ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.AlexAcc user)
                        ipv1
                        wild4 of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.Arr.Array
                      @ GHC.Types.Int
                      @ (LexLambda.AlexAcc user)
                      LexLambda.$fShowBTree2
                      LexLambda.alex_accept2
                      30#
                      ipv3 #) } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }) -}
ce5040d296d5beecc2586b08632d8ac3
  alex_accept2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 29#) -}
26225f7d19670b14a43259fad8d74366
  alex_accept3 :: LexLambda.AlexAcc user
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ user ->
                 LexLambda.AlexAcc @ user LexLambda.$fShowBTree2) -}
d5bbf36fb76bed257519a0e97860a320
  alex_accept4 :: LexLambda.AlexAcc user
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ user ->
                 LexLambda.AlexAcc @ user LexLambda.alex_accept5) -}
6eec73ef6f3a528594361faaffcb0b69
  alex_accept5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
ddc7c3ae269bd4eefc28758ad3d1e1ca
  alex_accept6 :: LexLambda.AlexAcc user
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ user ->
                 LexLambda.AlexAcc @ user LexLambda.alex_accept7) -}
4a5bbf506b8b2b7e5d1643f8b6a8c808
  alex_accept7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
eea037ea75074aa83d2de71ba0651eaf
  alex_action_1 :: LexLambda.Tok
  {- Strictness: x -}
5b2379e09e95ccc285f1d105da3014f0
  alex_action_3 ::
    LexLambda.Posn -> GHC.Base.String -> LexLambda.Token
  {- Arity: 2, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: LexLambda.Posn) (s :: GHC.Base.String) ->
                 LexLambda.PT
                   p
                   (let {
                      exit :: GHC.Base.String -> LexLambda.Tok -> LexLambda.Tok
                        <join 2> {- Arity: 2 -}
                      = \ (a :: GHC.Base.String)[OneShot]
                          (t :: LexLambda.Tok)[OneShot] ->
                        case GHC.Base.eqString s a of wild {
                          GHC.Types.False -> LexLambda.alex_action_1 GHC.Types.True -> t }
                    } in
                    let {
                      lvl26 :: LexLambda.Tok <join 0> = LexLambda.$WTV s
                    } in
                    letrec {
                      treeFind :: LexLambda.BTree -> LexLambda.Tok
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (ds :: LexLambda.BTree) ->
                        case ds of wild {
                          LexLambda.N -> lvl26
                          LexLambda.B a t left right
                          -> case GHC.Classes.$fOrd[]_$s$ccompare1 s a of wild1 {
                               GHC.Types.LT -> treeFind left
                               GHC.Types.EQ -> exit a t
                               GHC.Types.GT -> treeFind right } }
                    } in
                    treeFind LexLambda.resWords)) -}
2d71b8045fcb27e913c57ecc3d9a822a
  alex_action_4 ::
    LexLambda.Posn -> GHC.Base.String -> LexLambda.Token
  {- Arity: 2, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: LexLambda.Posn) (s :: GHC.Base.String) ->
                 LexLambda.PT
                   p
                   (let {
                      exit :: GHC.Base.String -> LexLambda.Tok -> LexLambda.Tok
                        <join 2> {- Arity: 2 -}
                      = \ (a :: GHC.Base.String)[OneShot]
                          (t :: LexLambda.Tok)[OneShot] ->
                        case GHC.Base.eqString s a of wild {
                          GHC.Types.False -> LexLambda.alex_action_1 GHC.Types.True -> t }
                    } in
                    let {
                      lvl26 :: LexLambda.Tok <join 0> = LexLambda.$WT_Id s
                    } in
                    letrec {
                      treeFind :: LexLambda.BTree -> LexLambda.Tok
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (ds :: LexLambda.BTree) ->
                        case ds of wild {
                          LexLambda.N -> lvl26
                          LexLambda.B a t left right
                          -> case GHC.Classes.$fOrd[]_$s$ccompare1 s a of wild1 {
                               GHC.Types.LT -> treeFind left
                               GHC.Types.EQ -> exit a t
                               GHC.Types.GT -> treeFind right } }
                    } in
                    treeFind LexLambda.resWords)) -}
57d44813081ff58c5e541f8db8224097
  alex_action_5 ::
    LexLambda.Posn -> GHC.Base.String -> LexLambda.Token
  {- Arity: 2, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: LexLambda.Posn) (s :: GHC.Base.String) ->
                 LexLambda.PT
                   p
                   (let {
                      exit :: GHC.Base.String -> LexLambda.Tok -> LexLambda.Tok
                        <join 2> {- Arity: 2 -}
                      = \ (a :: GHC.Base.String)[OneShot]
                          (t :: LexLambda.Tok)[OneShot] ->
                        case GHC.Base.eqString s a of wild {
                          GHC.Types.False -> LexLambda.alex_action_1 GHC.Types.True -> t }
                    } in
                    let {
                      lvl26 :: LexLambda.Tok <join 0> = LexLambda.$WTV s
                    } in
                    letrec {
                      treeFind :: LexLambda.BTree -> LexLambda.Tok
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (ds :: LexLambda.BTree) ->
                        case ds of wild {
                          LexLambda.N -> lvl26
                          LexLambda.B a t left right
                          -> case GHC.Classes.$fOrd[]_$s$ccompare1 s a of wild1 {
                               GHC.Types.LT -> treeFind left
                               GHC.Types.EQ -> exit a t
                               GHC.Types.GT -> treeFind right } }
                    } in
                    treeFind LexLambda.resWords)) -}
075740f954bd92269c2e291f6afc7d76
  alex_actions ::
    GHC.Arr.Array
      GHC.Types.Int
      (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             GHC.Arr.Array
                               GHC.Types.Int
                               (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token) #)
                        LexLambda.alex_actions1 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6ca55ef5886f6d4a28325b77bdd9ec7b
  alex_actions1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Arr.Array
            GHC.Types.Int
            (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        @ GHC.Prim.RealWorld
                        4#
                        (GHC.Arr.arrEleBottom
                           @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token))
                        s1# of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        ipv1
                        2#
                        LexLambda.alex_action_3
                        ipv of s2# { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        ipv1
                        1#
                        LexLambda.alex_action_4
                        s2# of s2#1 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        ipv1
                        0#
                        LexLambda.alex_action_3
                        s2#1 of s2#2 { DEFAULT ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                        ipv1
                        s2#2 of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.Arr.Array
                      @ GHC.Types.Int
                      @ (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                      LexLambda.$fShowBTree2
                      LexLambda.alex_actions2
                      4#
                      ipv3 #) } } } } }) -}
8bc03480273d1461f29708beee96c7b5
  alex_actions2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
d0c934795303517e63c445cc2e94eaf4
  alex_base :: LexLambda.AlexAddr
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (LexLambda.AlexA# LexLambda.alex_base1) -}
b55b4d318a461fd96cc45e8509394a8e
  alex_base1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\248\\255\\255\\255\\220\\255\\255\\255I\NUL\NUL\NUL\\201\NUL\NUL\NULI\SOH\NUL\NUL\\186\\255\\255\\255\NUL\NUL\NUL\NUL\\186\SOH\NUL\NUL\NUL\NUL\NUL\NUL:\STX\NUL\NUL\\186\STX\NUL\NUL\\186\ETX\NUL\NULz\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\\235\ETX\NUL\NUL\\193\EOT\NUL\NUL\NUL\NUL\NUL\NUL-\EOT\NUL\NULA\ENQ\NUL\NUL\\129\ENQ\NUL\NULA\ACK\NUL\NUL\SOH\ACK\NUL\NUL\NUL\NUL\NUL\NUL\\247\ACK\NUL\NUL\NUL\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\\208\a\NUL\NUL3\b\NUL\NUL"#) -}
1b43ade1c89e53ffd200c842692dc381
  alex_check :: LexLambda.AlexAddr
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (LexLambda.AlexA# LexLambda.alex_check1) -}
b04574a535b172c77dd47b5dbbb7565e
  alex_check1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\255\\255\t\NUL\n\
                 \\NUL\v\NUL\f\NUL\r\NUL*\NUL\\255\\255\\255\\255\\255\\255\\255\\255/\NUL\t\NUL\n\
                 \\NUL\v\NUL\f\NUL\r\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255 \NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255(\NUL)\NUL\\255\\255 \NUL\\255\\255\\255\\255.\NUL/\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255A\NULB\NULC\NULD\NULE\NULF\NULG\NULH\NULI\NULJ\NULK\NULL\NULM\NULN\NULO\NULP\NULQ\NULR\NULS\NULT\NULU\NULV\NULW\NULX\NULY\NULZ\NUL\\255\\255\\\NUL\\255\\255\\255\\255\\255\\255\\255\\255a\NULb\NULc\NULd\NULe\NULf\NULg\NULh\NULi\NULj\NULk\NULl\NULm\NULn\NULo\NULp\NULq\NULr\NULs\NULt\NULu\NULv\NULw\NULx\NULy\NULz\NUL*\NUL\\255\\255\\255\\255\\255\\255\\255\\255/\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\255\\255\\195\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\NUL\NUL\SOH\NUL\STX\NUL\ETX\NUL\EOT\NUL\ENQ\NUL\ACK\NUL\a\NUL\b\NUL\t\NUL\n\
                 \\NUL\v\NUL\f\NUL\r\NUL\SO\NUL\SI\NUL\DLE\NUL\DC1\NUL\DC2\NUL\DC3\NUL\DC4\NUL\NAK\NUL\SYN\NUL\ETB\NUL\CAN\NUL\EM\NUL\SUB\NUL\ESC\NUL\FS\NUL\GS\NUL\RS\NUL\US\NUL \NUL!\NUL\"\NUL#\NUL$\NUL%\NUL&\NUL'\NUL(\NUL)\NUL*\NUL+\NUL,\NUL-\NUL.\NUL/\NUL0\NUL1\NUL2\NUL3\NUL4\NUL5\NUL6\NUL7\NUL8\NUL9\NUL:\NUL;\NUL<\NUL=\NUL>\NUL?\NUL@\NULA\NULB\NULC\NULD\NULE\NULF\NULG\NULH\NULI\NULJ\NULK\NULL\NULM\NULN\NULO\NULP\NULQ\NULR\NULS\NULT\NULU\NULV\NULW\NULX\NULY\NULZ\NUL[\NUL\\\NUL]\NUL^\NUL_\NUL`\NULa\NULb\NULc\NULd\NULe\NULf\NULg\NULh\NULi\NULj\NULk\NULl\NULm\NULn\NULo\NULp\NULq\NULr\NULs\NULt\NULu\NULv\NULw\NULx\NULy\NULz\NUL{\NUL|\NUL}\NUL~\NUL\DEL\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL*\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\151\NUL\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\183\NUL\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\192\NUL\\193\NUL\\194\NUL\\195\NUL\\196\NUL\\197\NUL\\198\NUL\\199\NUL\\200\NUL\\201\NUL\\202\NUL\\203\NUL\\204\NUL\\205\NUL\\206\NUL\\207\NUL\\208\NUL\\209\NUL\\210\NUL\\211\NUL\\212\NUL\\213\NUL\\214\NUL\\215\NUL\\216\NUL\\217\NUL\\218\NUL\\219\NUL\\220\NUL\\221\NUL\\222\NUL\\223\NUL\\224\NUL\\225\NUL\\226\NUL\\227\NUL\\228\NUL\\229\NUL\\230\NUL\\231\NUL\\232\NUL\\233\NUL\\234\NUL\\235\NUL\\236\NUL\\237\NUL\\238\NUL\\239\NUL\\240\NUL\\241\NUL\\242\NUL\\243\NUL\\244\NUL\\245\NUL\\246\NUL\\247\NUL\\248\NUL\\249\NUL\\250\NUL\\251\NUL\\252\NUL\\253\NUL\\254\NUL\\255\NUL\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\255\\255\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\255\\255\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\\128\NUL\\129\NUL\\130\NUL\\131\NUL\\132\NUL\\133\NUL\\134\NUL\\135\NUL\\136\NUL\\137\NUL\\138\NUL\\139\NUL\\140\NUL\\141\NUL\\142\NUL\\143\NUL\\144\NUL\\145\NUL\\146\NUL\\147\NUL\\148\NUL\\149\NUL\\150\NUL\\255\\255\\152\NUL\\153\NUL\\154\NUL\\155\NUL\\156\NUL\\157\NUL\\158\NUL\\159\NUL\\160\NUL\\161\NUL\\162\NUL\\163\NUL\\164\NUL\\165\NUL\\166\NUL\\167\NUL\\168\NUL\\169\NUL\\170\NUL\\171\NUL\\172\NUL\\173\NUL\\174\NUL\\175\NUL\\176\NUL\\177\NUL\\178\NUL\\179\NUL\\180\NUL\\181\NUL\\182\NUL\\255\\255\\184\NUL\\185\NUL\\186\NUL\\187\NUL\\188\NUL\\189\NUL\\190\NUL\\191\NUL\NUL\NUL\SOH\NUL\STX\NUL\ETX\NUL\EOT\NUL\ENQ\NUL\ACK\NUL\a\NUL\b\NUL\t\NUL\n\
                 \\NUL\v\NUL\f\NUL\r\NUL\SO\NUL\SI\NUL\DLE\NUL\DC1\NUL\DC2\NUL\DC3\NUL\DC4\NUL\NAK\NUL\SYN\NUL\ETB\NUL\CAN\NUL\EM\NUL\SUB\NUL\ESC\NUL\FS\NUL\GS\NUL\RS\NUL\US\NUL \NUL!\NUL\"\NUL#\NUL$\NUL%\NUL&\NUL'\NUL(\NUL)\NUL*\NUL+\NUL,\NUL-\NUL.\NUL/\NUL0\NUL1\NUL2\NUL3\NUL4\NUL5\NUL6\NUL7\NUL8\NUL9\NUL:\NUL;\NUL<\NUL=\NUL>\NUL?\NUL@\NULA\NULB\NULC\NULD\NULE\NULF\NULG\NULH\NULI\NULJ\NULK\NULL\NULM\NULN\NULO\NULP\NULQ\NULR\NULS\NULT\NULU\NULV\NULW\NULX\NULY\NULZ\NUL[\NUL\\\NUL]\NUL^\NUL_\NUL`\NULa\NULb\NULc\NULd\NULe\NULf\NULg\NULh\NULi\NULj\NULk\NULl\NULm\NULn\NULo\NULp\NULq\NULr\NULs\NULt\NULu\NULv\NULw\NULx\NULy\NULz\NUL{\NUL|\NUL}\NUL~n\
a\NULb\NULc\NULd\NULe\NULf\NULg\NULh\NULi\NULj\NULk\NULl\NULm\NULn\NULo\NULp\NULq\NULr\NULs\NULt\NULu\NULv\NULw\NULx\NULy\NULz\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255'\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\2550\NUL1\NUL2\NUL3\NUL4\NUL5\NUL6\NUL7\NUL8\NUL9\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255A\NULB\NULC\NULD\NULE\NULF\NULG\NULH\NULI\NULJ\NULK\NULL\NULM\NULN\NULO\NULP\NULQ\NULR\NULS\NULT\NULU\NULV\NULW\NULX\NULY\NULZ\NUL\\255\\255\\255\\255\\255\\255\\255\\255_\NUL\\195\NULa\NULb\NULc\NULd\NULe\NULf\NULg\NULh\NULi\NULj\NULk\NULl\NULm\NULn\NULo\NULp\NULq\NULr\NULs\NULt\NULu\NULv\NULw\NULx\NULy\NULz}
27a170cfc55ee77fbdf79bdbc5eff970
  alex_deflt :: LexLambda.AlexAddr
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (LexLambda.AlexA# LexLambda.alex_deflt1) -}
379787633ff7ce884b4b7751541c808c
  alex_deflt1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\\255\\255\\255\\255\DLE\NUL\\255\\255\\255\\255\r\NUL\r\NUL\ACK\NUL\ACK\NUL\\255\\255\\255\\255\DLE\NUL\DLE\NUL\DLE\NUL\DC1\NUL\DC1\NUL\DLE\NUL\ETB\NUL\ETB\NUL\\255\\255\\255\\255\CAN\NUL\CAN\NUL\CAN\NUL\CAN\NUL\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255"#) -}
0e18b3acb731bea0159abc480b77c191
  alex_scan_tkn ::
    t1
    -> t2
    -> GHC.Prim.Int#
    -> LexLambda.AlexInput
    -> GHC.Prim.Int#
    -> LexLambda.AlexLastAcc
    -> (LexLambda.AlexLastAcc,
        (LexLambda.Posn, GHC.Types.Char, [LexLambda.Byte],
         GHC.Base.String))
  {- Arity: 6,
     Strictness: <L,A><L,A><S,U><S(LLSL),1*U(U(U,U,U),U,U,U)><S,U><L,1*U>m,
     Inline: [2],
     Unfolding: InlineRule (6, True, False)
                (\ @ t
                   @ t1
                   (w :: t)
                   (w1 :: t1)
                   (w2 :: GHC.Prim.Int#)
                   (w3 :: LexLambda.AlexInput)
                   (w4 :: GHC.Prim.Int#)
                   (w5 :: LexLambda.AlexLastAcc) ->
                 case w3 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case LexLambda.$walex_scan_tkn
                        @ t
                        @ t1
                        w2
                        ww1
                        ww2
                        ww3
                        ww4
                        w4
                        w5 of ww5 { (#,#) ww6 ww7 ->
                 (ww6, ww7) } }) -}
717d72e3c52581119d6e5b36f49f4713
  alex_tab_size :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
07962957ac9ff05df48669cd53eee0f6
  alex_table :: LexLambda.AlexAddr
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (LexLambda.AlexA# LexLambda.alex_table1) -}
057749f80c64b8ee72006fb46606ceaa
  alex_table1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfoldingfv\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\f\NUL\n\
                 \\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ENQ\NUL\t\NUL\b\NUL\b\NUL\b\NUL\an\
v\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\rv\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\r\NUL\f\NUL\n\
                 \\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ACK\NUL\ENQ\NUL\t\NUL\b\NUL\b\NUL\b\NUL\a}
5618d5da02bd2b9648c3b2e9ab5702f6
  eitherResIdent ::
    (GHC.Base.String -> LexLambda.Tok)
    -> GHC.Base.String -> LexLambda.Tok
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ (tv :: GHC.Base.String -> LexLambda.Tok)
                   (s :: GHC.Base.String) ->
                 let {
                   exit :: GHC.Base.String -> LexLambda.Tok -> LexLambda.Tok
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (a :: GHC.Base.String)[OneShot]
                       (t :: LexLambda.Tok)[OneShot] ->
                     case GHC.Base.eqString s a of wild {
                       GHC.Types.False -> LexLambda.alex_action_1 GHC.Types.True -> t }
                 } in
                 let {
                   lvl26 :: LexLambda.Tok <join 0> = tv s
                 } in
                 letrec {
                   treeFind :: LexLambda.BTree -> LexLambda.Tok
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: LexLambda.BTree) ->
                     case ds of wild {
                       LexLambda.N -> lvl26
                       LexLambda.B a t left right
                       -> case GHC.Classes.$fOrd[]_$s$ccompare1 s a of wild1 {
                            GHC.Types.LT -> treeFind left
                            GHC.Types.EQ -> exit a t
                            GHC.Types.GT -> treeFind right } }
                 } in
                 treeFind LexLambda.resWords) -}
3e470ec42884c91d560484cb9453d4c4
  mkPosToken ::
    LexLambda.Token
    -> ((GHC.Types.Int, GHC.Types.Int), GHC.Base.String)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: LexLambda.Token) ->
                 case LexLambda.$wmkPosToken w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
84f227ba763d88c42e8a32b17fc4ba27
  mkPosToken1 :: ((GHC.Types.Int, GHC.Types.Int), GHC.Base.String)
  {- Strictness: x -}
de3156218a4b60ca21dcfb424a3a5c6c
  posLineCol :: LexLambda.Posn -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: LexLambda.Posn) ->
                 case ds of wild { LexLambda.Pn dt dt1 dt2 ->
                 (GHC.Types.I# dt1, GHC.Types.I# dt2) }) -}
3e75d5a1c8e51ea2e56bda4c5faf005a
  prToken :: LexLambda.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (t :: LexLambda.Token) ->
                 case t of wild {
                   LexLambda.PT ds ds1
                   -> case ds1 of wild1 {
                        LexLambda.TS s dt -> s
                        LexLambda.TL s
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString s GHC.Show.$fShow[]1)
                        LexLambda.TI s -> s
                        LexLambda.TV s -> s
                        LexLambda.TD s -> s
                        LexLambda.TC s -> s
                        LexLambda.T_Id s -> s }
                   LexLambda.Err ds -> LexLambda.prToken1 }) -}
2abf72eb731e681f584487454b5fff24
  prToken1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# LexLambda.prToken2) -}
184bde807970f6a5c337c5ccbc3894e8
  prToken2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("#error"#) -}
dc0afbc5ae6c5e9f7be7c62d88c57f4f
  printPosn :: LexLambda.Posn -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSS),1*U(A,U,U)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: LexLambda.Posn) ->
                 case w of ww { LexLambda.Pn ww1 ww2 ww3 ->
                 LexLambda.$wprintPosn ww2 ww3 }) -}
69aadcd78853bf0f8a815fbf26cc5ea2
  printPosn1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", column "#) -}
78c42e28a3dd8352dbf794f33e42c165
  printPosn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("line "#) -}
603980623fab9e708c93eef5145dc11f
  quickIndex ::
    GHC.Arr.Array GHC.Types.Int (LexLambda.AlexAcc GHC.Types.Any)
    -> GHC.Types.Int -> LexLambda.AlexAcc GHC.Types.Any
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                (GHC.Arr.unsafeAt
                   @ GHC.Types.Int
                   @ (LexLambda.AlexAcc GHC.Types.Any)) -}
fdc7950652261fe2ec1d93195338a736
  resWords :: LexLambda.BTree
  {- Strictness: m2,
     Unfolding: (LexLambda.B
                   LexLambda.resWords_s3
                   LexLambda.resWords10
                   LexLambda.resWords4
                   LexLambda.resWords1) -}
de598814a11eb2f04838cbf8785b5735
  resWords1 :: LexLambda.BTree
  {- Strictness: m2,
     Unfolding: (LexLambda.B
                   LexLambda.resWords_s
                   LexLambda.resWords2
                   LexLambda.N
                   LexLambda.N) -}
85d0ef18ba48a42e62e26a923fca9de6
  resWords10 :: LexLambda.Tok
  {- Strictness: m1,
     Unfolding: (LexLambda.TS LexLambda.resWords_s3 3#) -}
48ccb521c0b86d3409d3e6089f45798f
  resWords11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("."#) -}
8b1da413fa6bab41a1b29b141a8efb71
  resWords2 :: LexLambda.Tok
  {- Strictness: m1,
     Unfolding: (LexLambda.TS LexLambda.resWords_s 4#) -}
fe407f783c31042f67072d2d1ebf4a69
  resWords3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\"#) -}
d3813f1badd87ac870d5fe55b54ec5cc
  resWords4 :: LexLambda.BTree
  {- Strictness: m2,
     Unfolding: (LexLambda.B
                   LexLambda.resWords_s2
                   LexLambda.resWords8
                   LexLambda.resWords5
                   LexLambda.N) -}
f61bee46799506f80a313c5e5e69f32b
  resWords5 :: LexLambda.BTree
  {- Strictness: m2,
     Unfolding: (LexLambda.B
                   LexLambda.resWords_s1
                   LexLambda.resWords6
                   LexLambda.N
                   LexLambda.N) -}
97a756107132f00f9407a71342657a7e
  resWords6 :: LexLambda.Tok
  {- Strictness: m1,
     Unfolding: (LexLambda.TS LexLambda.resWords_s1 1#) -}
bc152516a68f15236d9a4b6d84b7a194
  resWords7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
d23cada4648051011826073ad72156a5
  resWords8 :: LexLambda.Tok
  {- Strictness: m1,
     Unfolding: (LexLambda.TS LexLambda.resWords_s2 2#) -}
e2a8d2e7e806aa34e074dd5152d59004
  resWords9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
36bc137f0e4f463ca6f149eb9f5e0811
  resWords_s :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# LexLambda.resWords3) -}
66a89113d9519f9d7eb5fbb6851b1c2a
  resWords_s1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# LexLambda.resWords7) -}
f296700fd5fb9e1b01eaf061298494bd
  resWords_s2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# LexLambda.resWords9) -}
b681c31585d006c77b18a853282735db
  resWords_s3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# LexLambda.resWords11) -}
8dbb9400f23a9e0695d97d96b5444395
  share :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.id @ GHC.Base.String) -}
bec7d35eab0537953e4790276757532f
  tok ::
    (LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
    -> LexLambda.Posn -> GHC.Base.String -> LexLambda.Token
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ (f :: LexLambda.Posn -> GHC.Base.String -> LexLambda.Token)
                   (p :: LexLambda.Posn)
                   (s :: GHC.Base.String) ->
                 f p s) -}
da268a31347d4f709a7c35d2469355a7
  tokenLineCol :: LexLambda.Token -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: LexLambda.Token) ->
                 case w of wild {
                   LexLambda.PT p ds
                   -> case p of wild1 { LexLambda.Pn dt dt1 dt2 ->
                      (GHC.Types.I# dt1, GHC.Types.I# dt2) }
                   LexLambda.Err p
                   -> case p of wild1 { LexLambda.Pn dt dt1 dt2 ->
                      (GHC.Types.I# dt1, GHC.Types.I# dt2) } }) -}
f6c1ef4cf905201bdde74cd472290c1f
  tokenPos :: [LexLambda.Token] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [LexLambda.Token]) ->
                 case ds of wild {
                   [] -> LexLambda.tokenPos1
                   : t ds1
                   -> case t of wild1 {
                        LexLambda.PT p ds2 -> LexLambda.printPosn p
                        LexLambda.Err p -> LexLambda.printPosn p } }) -}
581e682518c0936ea2ddf946f1153b56
  tokenPos1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# LexLambda.tokenPos2) -}
ba5adf340e648c667695caa443c21896
  tokenPos2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("end of file"#) -}
c145179c59c3eb57b4c60a5fdc1c4ae4
  tokenPosn :: LexLambda.Token -> LexLambda.Posn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: LexLambda.Token) ->
                 case ds of wild {
                   LexLambda.PT p ds1 -> p LexLambda.Err p -> p }) -}
ea363702fee61afe1045419aca00b3cb
  tokens :: GHC.Base.String -> [LexLambda.Token]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (str :: GHC.Base.String) ->
                 LexLambda.tokens_go
                   (LexLambda.alexStartPos, LexLambda.tokens1,
                    GHC.Types.[] @ LexLambda.Byte, str)) -}
134e3e88817a28b5b6fb7ddabd3db185
  tokens1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
15a7d3e0c6b1755d6b07082223ca118b
  tokens_go :: LexLambda.AlexInput -> [LexLambda.Token]
  {- Arity: 1, Strictness: <S(LLSL),1*U(U(U,U,U),U,U,U)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: LexLambda.AlexInput) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 LexLambda.$wgo ww1 ww2 ww3 ww4 }) -}
8979270b47cd438b42f7574c6370883f
  unescapeInitTail :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 case x of wild {
                   [] -> case GHC.List.scanl2 ret_ty [GHC.Types.Char] of {}
                   : ds1 xs -> LexLambda.unescapeInitTail_unesc xs }) -}
6ab89d508861b41fd8f003809b2c0d29
  unescapeInitTail_unesc :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
c7ca939652457720dd107163a1f895c4
  utf8Encode :: GHC.Types.Char -> [GHC.Word.Word8]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 let {
                   x :: GHC.Prim.Int# = GHC.Prim.ord# ww1
                 } in
                 case GHC.Prim.<=# x 127# of lwild {
                   DEFAULT
                   -> case GHC.Prim.<=# x 2047# of lwild1 {
                        DEFAULT
                        -> case GHC.Prim.<=# x 65535# of lwild2 {
                             DEFAULT
                             -> GHC.Types.:
                                  @ GHC.Word.Word8
                                  (GHC.Word.W8#
                                     (GHC.Prim.narrow8Word#
                                        (GHC.Prim.int2Word#
                                           (GHC.Prim.+# 240# (GHC.Prim.uncheckedIShiftRA# x 18#)))))
                                  (GHC.Types.:
                                     @ GHC.Word.Word8
                                     (GHC.Word.W8#
                                        (GHC.Prim.narrow8Word#
                                           (GHC.Prim.int2Word#
                                              (GHC.Prim.+#
                                                 128#
                                                 (GHC.Prim.andI#
                                                    (GHC.Prim.uncheckedIShiftRA# x 12#)
                                                    63#)))))
                                     (GHC.Types.:
                                        @ GHC.Word.Word8
                                        (GHC.Word.W8#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    128#
                                                    (GHC.Prim.andI#
                                                       (GHC.Prim.uncheckedIShiftRA# x 6#)
                                                       63#)))))
                                        (GHC.Types.:
                                           @ GHC.Word.Word8
                                           (GHC.Word.W8#
                                              (GHC.Prim.narrow8Word#
                                                 (GHC.Prim.int2Word#
                                                    (GHC.Prim.+# 128# (GHC.Prim.andI# x 63#)))))
                                           (GHC.Types.[] @ GHC.Word.Word8))))
                             1#
                             -> GHC.Types.:
                                  @ GHC.Word.Word8
                                  (GHC.Word.W8#
                                     (GHC.Prim.narrow8Word#
                                        (GHC.Prim.int2Word#
                                           (GHC.Prim.+# 224# (GHC.Prim.uncheckedIShiftRA# x 12#)))))
                                  (GHC.Types.:
                                     @ GHC.Word.Word8
                                     (GHC.Word.W8#
                                        (GHC.Prim.narrow8Word#
                                           (GHC.Prim.int2Word#
                                              (GHC.Prim.+#
                                                 128#
                                                 (GHC.Prim.andI#
                                                    (GHC.Prim.uncheckedIShiftRA# x 6#)
                                                    63#)))))
                                     (GHC.Types.:
                                        @ GHC.Word.Word8
                                        (GHC.Word.W8#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# 128# (GHC.Prim.andI# x 63#)))))
                                        (GHC.Types.[] @ GHC.Word.Word8))) }
                        1#
                        -> GHC.Types.:
                             @ GHC.Word.Word8
                             (GHC.Word.W8#
                                (GHC.Prim.narrow8Word#
                                   (GHC.Prim.int2Word#
                                      (GHC.Prim.+# 192# (GHC.Prim.uncheckedIShiftRA# x 6#)))))
                             (GHC.Types.:
                                @ GHC.Word.Word8
                                (GHC.Word.W8#
                                   (GHC.Prim.narrow8Word#
                                      (GHC.Prim.int2Word#
                                         (GHC.Prim.+# 128# (GHC.Prim.andI# x 63#)))))
                                (GHC.Types.[] @ GHC.Word.Word8)) }
                   1#
                   -> GHC.Types.:
                        @ GHC.Word.Word8
                        (GHC.Word.W8# (GHC.Prim.narrow8Word# (GHC.Prim.int2Word# x)))
                        (GHC.Types.[] @ GHC.Word.Word8) } }) -}
instance GHC.Classes.Eq [LexLambda.Posn] = LexLambda.$fEqPosn
instance GHC.Classes.Eq [LexLambda.Tok] = LexLambda.$fEqTok
instance GHC.Classes.Eq [LexLambda.Token] = LexLambda.$fEqToken
instance GHC.Classes.Ord [LexLambda.Posn] = LexLambda.$fOrdPosn
instance GHC.Classes.Ord [LexLambda.Tok] = LexLambda.$fOrdTok
instance GHC.Classes.Ord [LexLambda.Token] = LexLambda.$fOrdToken
instance GHC.Show.Show [LexLambda.BTree] = LexLambda.$fShowBTree
instance GHC.Show.Show [LexLambda.Posn] = LexLambda.$fShowPosn
instance GHC.Show.Show [LexLambda.Tok] = LexLambda.$fShowTok
instance GHC.Show.Show [LexLambda.Token] = LexLambda.$fShowToken
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

