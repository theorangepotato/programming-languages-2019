
==================== FINAL INTERFACE ====================
2019-09-09 22:57:19.666549 UTC

interface Lambda-0.1.0.0-EqpDae84VpUAAE1gCYSPw8:AbsLambda 8064
  interface hash: d7effe30bbf396839f77ed685b9779b2
  ABI hash: a681a7ba710b13278cdb990bffbcda13
  export-list hash: c1becb9bf1ead1a5bb00194107a9b917
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 304d54461d9c82d343c8527b06b0f850
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  AbsLambda.Exp{AbsLambda.EAbs AbsLambda.EApp AbsLambda.EVar}
  AbsLambda.Id{AbsLambda.Id}
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Read 0604f4258fedea7e033ea68c6d7b40f2
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:Text.ParserCombinators.ReadPrec 9773f55573a0fca144b6966b06590c4e
import  -/  base-4.12.0.0:Text.Read.Lex cc2610206b1ce0c49789637e16412aa1
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
91dc676029964ad6bea6c3c29463b0c2
  $fEqExp :: GHC.Classes.Eq AbsLambda.Exp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Exp AbsLambda.$fEqExp_$c== AbsLambda.$fEqExp_$c/= -}
91dc676029964ad6bea6c3c29463b0c2
  $fEqExp_$c/= :: AbsLambda.Exp -> AbsLambda.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: AbsLambda.Exp) (y :: AbsLambda.Exp) ->
                 case AbsLambda.$fEqExp_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
91dc676029964ad6bea6c3c29463b0c2
  $fEqExp_$c== :: AbsLambda.Exp -> AbsLambda.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
4a3833258dacbd610dbb64ce83e9828c
  $fEqId :: GHC.Classes.Eq AbsLambda.Id
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Id
                  GHC.Base.eqString
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fEq[]_$s$c/=1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R <GHC.Types.Bool>_R) -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp :: GHC.Classes.Ord AbsLambda.Exp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Exp
                  AbsLambda.$fEqExp
                  AbsLambda.$fOrdExp_$ccompare
                  AbsLambda.$fOrdExp_$c<
                  AbsLambda.$fOrdExp_$c<=
                  AbsLambda.$fOrdExp_$c>
                  AbsLambda.$fOrdExp_$c>=
                  AbsLambda.$fOrdExp_$cmax
                  AbsLambda.$fOrdExp_$cmin -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp_$c< :: AbsLambda.Exp -> AbsLambda.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp_$c<= :: AbsLambda.Exp -> AbsLambda.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AbsLambda.Exp) (b :: AbsLambda.Exp) ->
                 case AbsLambda.$fOrdExp_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp_$c> :: AbsLambda.Exp -> AbsLambda.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: AbsLambda.Exp) (b :: AbsLambda.Exp) ->
                 AbsLambda.$fOrdExp_$c< b a) -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp_$c>= :: AbsLambda.Exp -> AbsLambda.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AbsLambda.Exp) (b :: AbsLambda.Exp) ->
                 case AbsLambda.$fOrdExp_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp_$ccompare ::
    AbsLambda.Exp -> AbsLambda.Exp -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp_$cmax :: AbsLambda.Exp -> AbsLambda.Exp -> AbsLambda.Exp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AbsLambda.Exp) (y :: AbsLambda.Exp) ->
                 case AbsLambda.$fOrdExp_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
91dc676029964ad6bea6c3c29463b0c2
  $fOrdExp_$cmin :: AbsLambda.Exp -> AbsLambda.Exp -> AbsLambda.Exp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AbsLambda.Exp) (y :: AbsLambda.Exp) ->
                 case AbsLambda.$fOrdExp_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
4a3833258dacbd610dbb64ce83e9828c
  $fOrdId :: GHC.Classes.Ord AbsLambda.Id
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Id
                  AbsLambda.$fEqId
                  GHC.Classes.$fOrd[]_$s$ccompare1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Classes.$fOrd[]_$s$c<1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrd[]_$s$c<=1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrd[]_$s$c>1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrd[]_$s$c>=1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrd[]_$s$cmax1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0]))
                  GHC.Classes.$fOrd[]_$s$cmin1
                    `cast`
                  (Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])
                   ->_R Sym (AbsLambda.N:Id[0])) -}
91dc676029964ad6bea6c3c29463b0c2
  $fReadExp :: GHC.Read.Read AbsLambda.Exp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Exp
                  AbsLambda.$fReadExp_$creadsPrec
                  AbsLambda.$fReadExp_$creadList
                  AbsLambda.$fReadExp1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <AbsLambda.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <AbsLambda.Exp>_R))
                  AbsLambda.$fReadExp_$creadListPrec -}
91dc676029964ad6bea6c3c29463b0c2
  $fReadExp1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (AbsLambda.Exp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ AbsLambda.Exp
                   AbsLambda.$fReadExp2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <AbsLambda.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <AbsLambda.Exp>_R))) -}
91dc676029964ad6bea6c3c29463b0c2
  $fReadExp2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (AbsLambda.Exp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: AbsLambda.Exp -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 AbsLambda.$w$creadPrec ww1 @ b w1 }) -}
91dc676029964ad6bea6c3c29463b0c2
  $fReadExp3 :: Text.ParserCombinators.ReadP.P [AbsLambda.Exp]
  {- Unfolding: ((AbsLambda.$fReadExp_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[AbsLambda.Exp]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[AbsLambda.Exp]>_R)
                   @ [AbsLambda.Exp]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [AbsLambda.Exp])) -}
91dc676029964ad6bea6c3c29463b0c2
  $fReadExp_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [AbsLambda.Exp]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [AbsLambda.Exp]
                   AbsLambda.$fReadExp3) -}
91dc676029964ad6bea6c3c29463b0c2
  $fReadExp_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [AbsLambda.Exp]
  {- Unfolding: (GHC.Read.list
                   @ AbsLambda.Exp
                   AbsLambda.$fReadExp1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <AbsLambda.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <AbsLambda.Exp>_R))) -}
91dc676029964ad6bea6c3c29463b0c2
  $fReadExp_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS AbsLambda.Exp
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ AbsLambda.Exp
                   (GHC.Read.$fRead()6
                      @ AbsLambda.Exp
                      AbsLambda.$fReadExp2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <AbsLambda.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     <AbsLambda.Exp>_R))
                      n
                      @ AbsLambda.Exp
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ AbsLambda.Exp))) -}
4a3833258dacbd610dbb64ce83e9828c
  $fReadId :: GHC.Read.Read AbsLambda.Id
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Id
                  AbsLambda.$fReadId_$creadsPrec
                  AbsLambda.$fReadId_$creadList
                  AbsLambda.$fReadId1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <AbsLambda.Id>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                <AbsLambda.Id>_R))
                  AbsLambda.$fReadId_$creadListPrec -}
4a3833258dacbd610dbb64ce83e9828c
  $fReadId1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (AbsLambda.Id -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ AbsLambda.Id
                   AbsLambda.$fReadId2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <AbsLambda.Id>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <AbsLambda.Id>_R))) -}
4a3833258dacbd610dbb64ce83e9828c
  $fReadId2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (AbsLambda.Id -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: AbsLambda.Id -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 AbsLambda.$w$creadPrec1 ww1 @ b w1 }) -}
087a9d8dc35f6bd510fa1923d19e01d0
  $fReadId3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# AbsLambda.$fReadId4) -}
901bc7d56a5fbf9eac05d9f15ab6d8fe
  $fReadId4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Id"#) -}
942f59088baccd352e93f43e3302a1a8
  $fReadId5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
4a3833258dacbd610dbb64ce83e9828c
  $fReadId6 :: Text.ParserCombinators.ReadP.P [AbsLambda.Id]
  {- Unfolding: ((AbsLambda.$fReadId_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[AbsLambda.Id]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[AbsLambda.Id]>_R)
                   @ [AbsLambda.Id]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [AbsLambda.Id])) -}
4a3833258dacbd610dbb64ce83e9828c
  $fReadId_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [AbsLambda.Id]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [AbsLambda.Id]
                   AbsLambda.$fReadId6) -}
4a3833258dacbd610dbb64ce83e9828c
  $fReadId_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [AbsLambda.Id]
  {- Unfolding: (GHC.Read.list
                   @ AbsLambda.Id
                   AbsLambda.$fReadId1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <AbsLambda.Id>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <AbsLambda.Id>_R))) -}
4a3833258dacbd610dbb64ce83e9828c
  $fReadId_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS AbsLambda.Id
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ AbsLambda.Id
                   (GHC.Read.$fRead()6
                      @ AbsLambda.Id
                      AbsLambda.$fReadId2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <AbsLambda.Id>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <AbsLambda.Id>_R))
                      n
                      @ AbsLambda.Id
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ AbsLambda.Id))) -}
91dc676029964ad6bea6c3c29463b0c2
  $fShowExp :: GHC.Show.Show AbsLambda.Exp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Exp
                  AbsLambda.$fShowExp_$cshowsPrec
                  AbsLambda.$fShowExp_$cshow
                  AbsLambda.$fShowExp_$cshowList -}
91dc676029964ad6bea6c3c29463b0c2
  $fShowExp1 :: AbsLambda.Exp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: AbsLambda.Exp) (w1 :: GHC.Base.String) ->
                 AbsLambda.$w$cshowsPrec 0# w w1) -}
e680b1cb1565db4310b6d47cf3235a4c
  $fShowExp2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
91dc676029964ad6bea6c3c29463b0c2
  $fShowExp_$cshow :: AbsLambda.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AbsLambda.Exp) ->
                 AbsLambda.$fShowExp_$cshowsPrec
                   AbsLambda.$fShowExp2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
91dc676029964ad6bea6c3c29463b0c2
  $fShowExp_$cshowList :: [AbsLambda.Exp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [AbsLambda.Exp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ AbsLambda.Exp AbsLambda.$fShowExp1 ls s) -}
91dc676029964ad6bea6c3c29463b0c2
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> AbsLambda.Exp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: AbsLambda.Exp)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 AbsLambda.$w$cshowsPrec ww1 w1 w2 }) -}
4a3833258dacbd610dbb64ce83e9828c
  $fShowId :: GHC.Show.Show AbsLambda.Id
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambda.Id
                  AbsLambda.$fShowId_$cshowsPrec
                  AbsLambda.$fShowId_$cshow
                  AbsLambda.$fShowId_$cshowList -}
4a3833258dacbd610dbb64ce83e9828c
  $fShowId1 :: AbsLambda.Id -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: AbsLambda.Id) (w1 :: GHC.Base.String) ->
                 AbsLambda.$w$cshowsPrec1 0# w w1) -}
3aefe80b36499917c2b557f02e10d490
  $fShowId2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Id "#) -}
65dafef5fe51231d92f54bb1f6cfb3c6
  $fShowId3 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4a3833258dacbd610dbb64ce83e9828c
  $fShowId_$cshow :: AbsLambda.Id -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: AbsLambda.Id) ->
                 GHC.CString.unpackAppendCString#
                   AbsLambda.$fShowId2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString
                         x `cast` (AbsLambda.N:Id[0])
                         AbsLambda.$fShowId3))) -}
4a3833258dacbd610dbb64ce83e9828c
  $fShowId_$cshowList :: [AbsLambda.Id] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [AbsLambda.Id]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ AbsLambda.Id AbsLambda.$fShowId1 ls s) -}
4a3833258dacbd610dbb64ce83e9828c
  $fShowId_$cshowsPrec ::
    GHC.Types.Int -> AbsLambda.Id -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: AbsLambda.Id)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 AbsLambda.$w$cshowsPrec1 ww1 w1 w2 }) -}
6341a67e5b276833835261e4337f3eb9
  $tc'EAbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13050792945285892616##
                   8773263307741634251##
                   AbsLambda.$trModule
                   AbsLambda.$tc'EAbs2
                   0#
                   AbsLambda.$tc'EAbs1) -}
5b8aeb5533a5f9604b71a36fe9da6c62
  $tc'EAbs1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b9bc14bf33ec3b833548eef6151f0fb5
  $tc'EAbs2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$tc'EAbs3) -}
658674d15124ace10c9f8a07f3b1320b
  $tc'EAbs3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EAbs"#) -}
03c01ef4726fc976d224459d833c3843
  $tc'EApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2187050280800137211##
                   18307113152390028533##
                   AbsLambda.$trModule
                   AbsLambda.$tc'EApp2
                   0#
                   AbsLambda.$tc'EApp1) -}
1c4deb5cf37e8607ea724b8217a0a197
  $tc'EApp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d01e2ecc31e6297c4358851b97d9ce15
  $tc'EApp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$tc'EApp3) -}
3578e3f77ddbe0272882cd5830a97d3b
  $tc'EApp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EApp"#) -}
f4bf07844e7c481c40a3647ed21f35bb
  $tc'EVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9842889298976877307##
                   5594107605221898958##
                   AbsLambda.$trModule
                   AbsLambda.$tc'EVar2
                   0#
                   AbsLambda.$tc'EVar1) -}
201a4dd86b108e3e3b4c769a16231ba5
  $tc'EVar1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7a4dfd6f076b7391b29794fb9664fd89
  $tc'EVar2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$tc'EVar3) -}
fd16e8c06d544f21ceb098dc4e037746
  $tc'EVar3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EVar"#) -}
be1d29f50899982b8626ded97f335b15
  $tc'Id :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10547389183216031112##
                   6158503657496119898##
                   AbsLambda.$trModule
                   AbsLambda.$tc'Id2
                   0#
                   AbsLambda.$tc'Id1) -}
961ba79ced936e5be0154912402b0585
  $tc'Id1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
958d8d4a95cb54c7bba8063dcf5e0415
  $tc'Id2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$tc'Id3) -}
ee6a82ebfd764a6a1360fd6b830e0941
  $tc'Id3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Id"#) -}
283105a3dc9fa41b1ca20d5bcdba35ad
  $tcExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14626141906518608432##
                   4858633250874634828##
                   AbsLambda.$trModule
                   AbsLambda.$tcExp1
                   0#
                   GHC.Types.krep$*) -}
a877b43815a3a807c40f487c7ab8e152
  $tcExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$tcExp2) -}
e36de5fd41205cd331b79058b5f97ec6
  $tcExp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Exp"#) -}
9e3cb302953e3875b32b3c1a2f522abb
  $tcId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13379590576384463784##
                   8317807575455826550##
                   AbsLambda.$trModule
                   AbsLambda.$tcId1
                   0#
                   GHC.Types.krep$*) -}
d5dce75568aacd9227a19f9cb6f503b8
  $tcId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$fReadId4) -}
ccb5c24ccea010cc022985e2a7a7bc9b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AbsLambda.$trModule3
                   AbsLambda.$trModule1) -}
7f3b9927c27decffe81547d138c39f4d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$trModule2) -}
857bee358de75ad292c8448227957326
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AbsLambda"#) -}
8c479b784582258fe96be5ac96011e8d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AbsLambda.$trModule4) -}
05dcb6913c19b29585525f2bd9a43f00
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Lambda-0.1.0.0-EqpDae84VpUAAE1gCYSPw8"#) -}
91dc676029964ad6bea6c3c29463b0c2
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (AbsLambda.Exp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [2] -}
4a3833258dacbd610dbb64ce83e9828c
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (AbsLambda.Id -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: AbsLambda.Id -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.<=# ww 10# of lwild {
                   DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                   1#
                   -> let {
                        lvl117 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl118 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$fRead()6
                                @ GHC.Base.String
                                GHC.Read.$fReadChar2
                                  `cast`
                                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                          <GHC.Base.String>_R))
                                AbsLambda.$fReadId5
                                @ b
                                (\ (a1 :: GHC.Base.String) ->
                                 w a1 `cast` (Sym (AbsLambda.N:Id[0])))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a3 :: Text.Read.Lex.Lexeme) ->
                             case a3 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a1
                               -> case GHC.Base.eqString a1 AbsLambda.$fReadId3 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl118 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>,
                             Unfolding: InlineRule (1, True, True) (\ (a3 :: ()) -> lvl117) -}
                        = \ (a3 :: ()) -> lvl117
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         Text.ParserCombinators.ReadP.skipSpaces2 a @ b k) }) -}
91dc676029964ad6bea6c3c29463b0c2
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> AbsLambda.Exp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
4a3833258dacbd610dbb64ce83e9828c
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> AbsLambda.Id -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: AbsLambda.Id)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        AbsLambda.$fShowId2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              w `cast` (AbsLambda.N:Id[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           AbsLambda.$fShowId2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 w `cast` (AbsLambda.N:Id[0])
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }) -}
91dc676029964ad6bea6c3c29463b0c2
  data Exp
    = EAbs AbsLambda.Id AbsLambda.Exp
    | EApp AbsLambda.Exp AbsLambda.Exp
    | EVar AbsLambda.Id
4a3833258dacbd610dbb64ce83e9828c
  newtype Id = Id GHC.Base.String
instance [safe] GHC.Classes.Eq [AbsLambda.Exp] = AbsLambda.$fEqExp
instance [safe] GHC.Classes.Eq [AbsLambda.Id] = AbsLambda.$fEqId
instance [safe] GHC.Classes.Ord [AbsLambda.Exp]
  = AbsLambda.$fOrdExp
instance [safe] GHC.Classes.Ord [AbsLambda.Id] = AbsLambda.$fOrdId
instance [safe] GHC.Read.Read [AbsLambda.Exp] = AbsLambda.$fReadExp
instance [safe] GHC.Read.Read [AbsLambda.Id] = AbsLambda.$fReadId
instance [safe] GHC.Show.Show [AbsLambda.Exp] = AbsLambda.$fShowExp
instance [safe] GHC.Show.Show [AbsLambda.Id] = AbsLambda.$fShowId
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

