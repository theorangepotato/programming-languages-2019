------------------
-- Lambda Calculus
------------------

EAbs.   Exp ::= "\\" Id "." Exp ;  -- in effect: "\" Id "." Exp ; 
EApp.   Exp ::= Exp Exp1 ; -- application associates on the left
EVar.   Exp1 ::= Id ; -- this needs to be Exp1, not Exp (try "\x.x x")

coercions Exp 1 ;

token Id (letter (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;

----------------------------------------------
----------------------------------------------
-- parse the following expressions by running 
--   ./TestLambdaNat
-- in the terminal in the directory where you have TestLambda
-- and where test.lc contains any one of the expressions below.
-- Verify that the following statements are correct:
--
-- \x.x x x equals \x. ((x x) x) -- the empty spaces are generally not important but the ones between the x are important (why?)
-- (\x.x) x x equals (((\x.x) x) x) 
-- (\x.x) S 0 equals (\x.x) (S 0) 
--
-- Btw, I say that two strings are equal if they produce the same parse tree (abstract syntax tree)
----------------------------------------------
----------------------------------------------
