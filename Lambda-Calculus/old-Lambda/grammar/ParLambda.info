-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParLambda.y
-----------------------------------------------------------------------------

state 15 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	%start_pExp1 -> Exp1                               (1)
	Id -> L_Id                                         (2)
	Exp -> '\\' Id '.' Exp                             (3)
	Exp -> Exp Exp1                                    (4)
	Exp -> Exp1                                        (5)
	Exp1 -> Id                                         (6)
	Exp1 -> '(' Exp ')'                                (7)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'.'            { PT _ (TS _ 3) }
	'\\'           { PT _ (TS _ 4) }
	L_Id           { PT _ (T_Id $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	%start_pExp1    rule  1
	Id              rule  2
	Exp             rules 3, 4, 5
	Exp1            rules 6, 7

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 6
	'\\'           shift, and enter state 9
	L_Id           shift, and enter state 3

	Id             goto state 4
	Exp            goto state 7
	Exp1           goto state 8

State 1


	'('            shift, and enter state 6
	L_Id           shift, and enter state 3

	Id             goto state 4
	Exp1           goto state 5

State 2


	L_Id           shift, and enter state 3


State 3

	Id -> L_Id .                                        (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	'.'            reduce using rule 2
	L_Id           reduce using rule 2
	%eof           reduce using rule 2


State 4

	Exp1 -> Id .                                        (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	L_Id           reduce using rule 6
	%eof           reduce using rule 6


State 5

	%start_pExp1 -> Exp1 .                              (rule 1)

	%eof           accept


State 6

	Exp1 -> '(' . Exp ')'                               (rule 7)

	'('            shift, and enter state 6
	'\\'           shift, and enter state 9
	L_Id           shift, and enter state 3

	Id             goto state 4
	Exp            goto state 12
	Exp1           goto state 8

State 7

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . Exp1                                   (rule 4)

	'('            shift, and enter state 6
	L_Id           shift, and enter state 3
	%eof           accept

	Id             goto state 4
	Exp1           goto state 11

State 8

	Exp -> Exp1 .                                       (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	L_Id           reduce using rule 5
	%eof           reduce using rule 5


State 9

	Exp -> '\\' . Id '.' Exp                            (rule 3)

	L_Id           shift, and enter state 3

	Id             goto state 10

State 10

	Exp -> '\\' Id . '.' Exp                            (rule 3)

	'.'            shift, and enter state 14


State 11

	Exp -> Exp Exp1 .                                   (rule 4)

	'('            reduce using rule 4
	')'            reduce using rule 4
	L_Id           reduce using rule 4
	%eof           reduce using rule 4


State 12

	Exp -> Exp . Exp1                                   (rule 4)
	Exp1 -> '(' Exp . ')'                               (rule 7)

	'('            shift, and enter state 6
	')'            shift, and enter state 13
	L_Id           shift, and enter state 3

	Id             goto state 4
	Exp1           goto state 11

State 13

	Exp1 -> '(' Exp ')' .                               (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	L_Id           reduce using rule 7
	%eof           reduce using rule 7


State 14

	Exp -> '\\' Id '.' . Exp                            (rule 3)

	'('            shift, and enter state 6
	'\\'           shift, and enter state 9
	L_Id           shift, and enter state 3

	Id             goto state 4
	Exp            goto state 15
	Exp1           goto state 8

State 15

	Exp -> '\\' Id '.' Exp .                            (rule 3)
	Exp -> Exp . Exp1                                   (rule 4)

	'('            shift, and enter state 6
			(reduce using rule 3)

	')'            reduce using rule 3
	L_Id           shift, and enter state 3
			(reduce using rule 3)

	%eof           reduce using rule 3

	Id             goto state 4
	Exp1           goto state 11

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 8
Number of terminals: 5
Number of non-terminals: 5
Number of states: 16
