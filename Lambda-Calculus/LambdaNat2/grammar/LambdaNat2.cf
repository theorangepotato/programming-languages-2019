-----------------------------------------
-- Lambda Calculus with Natural Numbers 2
-----------------------------------------

Prog.   Program ::= Exp ; -- this first line is redundant
EAbs.   Exp1 ::= "\\" Id "." Exp ;  -- in effect: "\" Id "." Exp ; -- btw, pronounce "\" as "lambda" in this context
EApp.   Exp2 ::= Exp2 Exp3 ; -- application associates on the left
ENat0.  Exp3 ::= "0" ;
ENatS.  Exp3 ::= "S" Exp3 ; 
EVar.   Exp4 ::= Id ; 

coercions Exp 4 ;

token Id (letter (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;
