val nil = 
    let val a = new [] in 
    a := "nil";
    a ;;

val cons = \e. \a. 
    let val b = new [] in
    b := [e,a];
    b ;;

val head = \a.
    case !a of {
        "nil"-> "tried to take the head of an empty list",
        [e,a'] -> e 
    } ;;

val tail = \a.
    case !a of {
        "nil" -> "tried to take the tail of an empty list",
        [e,a'] -> a'
    } ;;

rec length = \l. 
    case !l of { 
        "nil" -> 0 , 
        _ -> 1 + length (tail l) 
    } ;;


val length = \a. 
    let val ptr = new [] in
    let val i = new [] in
    i := 0;
    ptr := a;
    while !(!ptr) != "nil" do
        case !(!ptr) of {
            [e,a'] -> 
                    i := !i + 1; 
                ptr := a'
        } ;
    !i;;

