---------------------------------------------------------------
-- Lambda Calculus 5 with numbers, conditional, recursion, lists
---------------------------------------------------------------
-- this grammar can handle 
-- hd (a:b:#):# but not
-- tl (hd (a:b:#):#)


Prog.      Program ::= Exp ;  
EList.     Exp ::= List ;
ENil.      List ::= "#" ; -- EndOfList, aka empty list
ECons.     List ::= Exp ":" List ;
EAbs.      Exp1 ::= "\\" Id "." Exp ;   
EIf.       Exp2 ::= "if" Exp "=" Exp "then" Exp "else" Exp ; 
ELet.      Exp2 ::= "let" Id "=" Exp "in" Exp ;  
ERec.      Exp2 ::= "let rec" Id "=" Exp "in" Exp ;
EFix.      Exp2 ::= "fix" Exp ; 
EHd.       Exp2 ::= "hd" List ;
ETl.       Exp2 ::= "tl" List ;
EMinusOne. Exp2 ::= "minus_one" Exp ;
EApp.      Exp3 ::= Exp3 Exp4 ;  
ENat0.     Exp4 ::= "0" ; 
ENatS.     Exp4 ::= "S" Exp4 ; 

EVar.      Exp5 ::= Id ;  

coercions Exp 6 ;

token Id (letter (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;

